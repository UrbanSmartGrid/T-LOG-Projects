
PIT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006530  08006530  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001910  200001e4  0800671c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001af4  0800671c  00021af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012193  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ba1  00000000  00000000  000323a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  00034f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f95  00000000  00000000  00036450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c982  00000000  00000000  000593e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3a7f  00000000  00000000  00065d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001297e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  00129864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064b0 	.word	0x080064b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080064b0 	.word	0x080064b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_GPIO_Init+0x9c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <MX_GPIO_Init+0x9c>)
 80004e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_GPIO_Init+0x9c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_GPIO_Init+0x9c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_GPIO_Init+0x9c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_GPIO_Init+0xa0>)
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_GPIO_Init+0xa4>)
 8000548:	f000 fb30 	bl	8000bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2028      	movs	r0, #40	; 0x28
 8000552:	f000 faf4 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000556:	2028      	movs	r0, #40	; 0x28
 8000558:	f000 fb0d 	bl	8000b76 <HAL_NVIC_EnableIRQ>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40023800 	.word	0x40023800
 8000568:	10210000 	.word	0x10210000
 800056c:	40021800 	.word	0x40021800

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t msg_length = strlen("TIK\n");
 8000576:	2304      	movs	r3, #4
 8000578:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 f971 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f819 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f7ff ffa1 	bl	80004c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000586:	f005 f997 	bl	80058b8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(bButtonPressed == false);
 800058a:	bf00      	nop
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0x3c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f8      	bne.n	800058c <main+0x1c>

	  bButtonPressed = false;
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x3c>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]

	  CDC_Transmit_FS((uint8_t*)"TIK\n", msg_length);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <main+0x40>)
 80005a6:	f005 fa45 	bl	8005a34 <CDC_Transmit_FS>
	  while(bButtonPressed == false);
 80005aa:	e7ee      	b.n	800058a <main+0x1a>
 80005ac:	20000200 	.word	0x20000200
 80005b0:	080064c8 	.word	0x080064c8

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 feb2 	bl	800632c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000624:	230f      	movs	r3, #15
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000628:	2390      	movs	r3, #144	; 0x90
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000630:	2305      	movs	r3, #5
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fdf7 	bl	800222c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f820 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2103      	movs	r1, #3
 8000666:	4618      	mov	r0, r3
 8000668:	f002 f850 	bl	800270c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f809 	bl	8000688 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f8e2 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	bButtonPressed = true;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <EXTI15_10_IRQHandler+0x18>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800074e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000752:	f000 fbc5 	bl	8000ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000200 	.word	0x20000200

08000760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <OTG_FS_IRQHandler+0x10>)
 8000766:	f000 fd2e 	bl	80011c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200016e8 	.word	0x200016e8

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f005 fd88 	bl	80062b8 <__errno>
 80007a8:	4602      	mov	r2, r0
 80007aa:	230c      	movs	r3, #12
 80007ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20020000 	.word	0x20020000
 80007d4:	00000800 	.word	0x00000800
 80007d8:	20000204 	.word	0x20000204
 80007dc:	20001af8 	.word	0x20001af8

080007e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <SystemInit+0x28>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <SystemInit+0x28>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SystemInit+0x28>)
 80007f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007fa:	609a      	str	r2, [r3, #8]
#endif
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000810:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000812:	e003      	b.n	800081c <LoopCopyDataInit>

08000814 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000816:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000818:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800081a:	3104      	adds	r1, #4

0800081c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000820:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000822:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000824:	d3f6      	bcc.n	8000814 <CopyDataInit>
  ldr  r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000828:	e002      	b.n	8000830 <LoopFillZerobss>

0800082a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800082a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800082c:	f842 3b04 	str.w	r3, [r2], #4

08000830 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000832:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000834:	d3f9      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000836:	f7ff ffd3 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083a:	f005 fd43 	bl	80062c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fe97 	bl	8000570 <main>
  bx  lr    
 8000842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000844:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000848:	08006538 	.word	0x08006538
  ldr  r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000850:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000854:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000858:	20001af4 	.word	0x20001af4

0800085c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <HAL_Init+0x40>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_Init+0x40>)
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x40>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f94d 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff ff00 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f965 	bl	8000b92 <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f92d 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000214 	.word	0x20000214

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000214 	.word	0x20000214

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_Delay+0x40>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000008 	.word	0x20000008

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff29 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff3e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff31 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e16b      	b.n	8000ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 815a 	bne.w	8000e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d00b      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d007      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bfa:	2b11      	cmp	r3, #17
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d130      	bne.n	8000c68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	f003 0201 	and.w	r2, r3, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0xfc>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b12      	cmp	r3, #18
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80b4 	beq.w	8000e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a5e      	ldr	r2, [pc, #376]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a50      	ldr	r2, [pc, #320]	; (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x222>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x21e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_GPIO_Init+0x320>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_GPIO_Init+0x324>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <HAL_GPIO_Init+0x328>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x32c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00e      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae90 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3724      	adds	r7, #36	; 0x24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	40021c00 	.word	0x40021c00
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f806 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40013c00 	.word	0x40013c00

08000f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f28:	b08f      	sub	sp, #60	; 0x3c
 8000f2a:	af0a      	add	r7, sp, #40	; 0x28
 8000f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e10f      	b.n	8001158 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f004 feb4 	bl	8005cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fe81 	bl	8002c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	687e      	ldr	r6, [r7, #4]
 8000f84:	466d      	mov	r5, sp
 8000f86:	f106 0410 	add.w	r4, r6, #16
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9a:	1d33      	adds	r3, r6, #4
 8000f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f001 fd58 	bl	8002a54 <USB_CoreInit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2202      	movs	r2, #2
 8000fae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0d0      	b.n	8001158 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fe6f 	bl	8002ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e04a      	b.n	800105e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	333d      	adds	r3, #61	; 0x3d
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	333c      	adds	r3, #60	; 0x3c
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	b298      	uxth	r0, r3
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3342      	adds	r3, #66	; 0x42
 8001004:	4602      	mov	r2, r0
 8001006:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	333f      	adds	r3, #63	; 0x3f
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3344      	adds	r3, #68	; 0x44
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3348      	adds	r3, #72	; 0x48
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3350      	adds	r3, #80	; 0x50
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d3af      	bcc.n	8000fc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e044      	b.n	80010f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3b5      	bcc.n	800106e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	687e      	ldr	r6, [r7, #4]
 800110a:	466d      	mov	r5, sp
 800110c:	f106 0410 	add.w	r4, r6, #16
 8001110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001120:	1d33      	adds	r3, r6, #4
 8001122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f001 fde5 	bl	8002cf4 <USB_DevInit>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e00d      	b.n	8001158 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fe2d 	bl	8003db0 <USB_DevDisconnect>

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001160 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_PCD_Start+0x1c>
 8001178:	2302      	movs	r3, #2
 800117a:	e020      	b.n	80011be <HAL_PCD_Start+0x5e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	2b01      	cmp	r3, #1
 800118a:	d109      	bne.n	80011a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fd59 	bl	8002c5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fddd 	bl	8003d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b08d      	sub	sp, #52	; 0x34
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fe9b 	bl	8003f18 <USB_GetMode>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 839d 	bne.w	8001924 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fdff 	bl	8003df2 <USB_ReadInterrupts>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8393 	beq.w	8001922 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fdf6 	bl	8003df2 <USB_ReadInterrupts>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b02      	cmp	r3, #2
 800120e:	d107      	bne.n	8001220 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f002 0202 	and.w	r2, r2, #2
 800121e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fde4 	bl	8003df2 <USB_ReadInterrupts>
 800122a:	4603      	mov	r3, r0
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b10      	cmp	r3, #16
 8001232:	d161      	bne.n	80012f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0210 	bic.w	r2, r2, #16
 8001242:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f003 020f 	and.w	r2, r3, #15
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	3304      	adds	r3, #4
 8001262:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	0c5b      	lsrs	r3, r3, #17
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	2b02      	cmp	r3, #2
 800126e:	d124      	bne.n	80012ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d035      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	6a38      	ldr	r0, [r7, #32]
 8001290:	f002 fc4a 	bl	8003b28 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a0:	441a      	add	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b2:	441a      	add	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	e016      	b.n	80012e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	0c5b      	lsrs	r3, r3, #17
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d110      	bne.n	80012e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012cc:	2208      	movs	r2, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	6a38      	ldr	r0, [r7, #32]
 80012d2:	f002 fc29 	bl	8003b28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e2:	441a      	add	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0210 	orr.w	r2, r2, #16
 80012f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fd78 	bl	8003df2 <USB_ReadInterrupts>
 8001302:	4603      	mov	r3, r0
 8001304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800130c:	d16e      	bne.n	80013ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fd7e 	bl	8003e18 <USB_ReadDevAllOutEpInterrupt>
 800131c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800131e:	e062      	b.n	80013e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d057      	beq.n	80013da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fda3 	bl	8003e80 <USB_ReadDevOutEPInterrupt>
 800133a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00c      	beq.n	8001360 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	015a      	lsls	r2, r3, #5
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001352:	461a      	mov	r2, r3
 8001354:	2301      	movs	r3, #1
 8001356:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fdb0 	bl	8001ec0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00c      	beq.n	8001384 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001376:	461a      	mov	r2, r3
 8001378:	2308      	movs	r3, #8
 800137a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800137c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 feaa 	bl	80020d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	015a      	lsls	r2, r3, #5
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139a:	461a      	mov	r2, r3
 800139c:	2310      	movs	r3, #16
 800139e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b6:	461a      	mov	r2, r3
 80013b8:	2320      	movs	r3, #32
 80013ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d2:	461a      	mov	r2, r3
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d199      	bne.n	8001320 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fcfe 	bl	8003df2 <USB_ReadInterrupts>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001400:	f040 80c0 	bne.w	8001584 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fd1f 	bl	8003e4c <USB_ReadDevAllInEpInterrupt>
 800140e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001414:	e0b2      	b.n	800157c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a7 	beq.w	8001570 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fd45 	bl	8003ebc <USB_ReadDevInEPInterrupt>
 8001432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d057      	beq.n	80014ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	2201      	movs	r2, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	69f9      	ldr	r1, [r7, #28]
 800145a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800145e:	4013      	ands	r3, r2
 8001460:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146e:	461a      	mov	r2, r3
 8001470:	2301      	movs	r3, #1
 8001472:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d132      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3348      	adds	r3, #72	; 0x48
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4403      	add	r3, r0
 800149c:	3344      	adds	r3, #68	; 0x44
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4419      	add	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	3348      	adds	r3, #72	; 0x48
 80014b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d113      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x31c>
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3350      	adds	r3, #80	; 0x50
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014da:	461a      	mov	r2, r3
 80014dc:	2101      	movs	r1, #1
 80014de:	f002 fd4d 	bl	8003f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f004 fc6a 	bl	8005dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001504:	461a      	mov	r2, r3
 8001506:	2308      	movs	r3, #8
 8001508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	2310      	movs	r3, #16
 8001524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153c:	461a      	mov	r2, r3
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2302      	movs	r3, #2
 800155c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fc1b 	bl	8001da6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3301      	adds	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f af49 	bne.w	8001416 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fc32 	bl	8003df2 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001598:	d122      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fe26 	bl	8002214 <HAL_PCDEx_LPM_Callback>
 80015c8:	e002      	b.n	80015d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f004 fc70 	bl	8005eb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fc04 	bl	8003df2 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f4:	d112      	bne.n	800161c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f004 fc2c 	bl	8005e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800161a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fbe6 	bl	8003df2 <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001630:	f040 80c7 	bne.w	80017c2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2110      	movs	r1, #16
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fcb4 	bl	8002fbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001658:	e056      	b.n	8001708 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001666:	461a      	mov	r2, r3
 8001668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800166c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167e:	0151      	lsls	r1, r2, #5
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	440a      	add	r2, r1
 8001684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800168c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	0151      	lsls	r1, r2, #5
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	440a      	add	r2, r1
 80016a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ba:	461a      	mov	r2, r3
 80016bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d2:	0151      	lsls	r1, r2, #5
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	440a      	add	r2, r1
 80016d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001700:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	3301      	adds	r3, #1
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	429a      	cmp	r2, r3
 8001710:	d3a3      	bcc.n	800165a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001724:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173e:	f043 030b 	orr.w	r3, r3, #11
 8001742:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001754:	f043 030b 	orr.w	r3, r3, #11
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	e015      	b.n	8001788 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800176e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001772:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001782:	f043 030b 	orr.w	r3, r3, #11
 8001786:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001796:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800179a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ac:	461a      	mov	r2, r3
 80017ae:	f002 fbe5 	bl	8003f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fb13 	bl	8003df2 <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d6:	d124      	bne.n	8001822 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fba9 	bl	8003f34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fc49 	bl	800307e <USB_GetDevSpeed>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	f001 f920 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 80017fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4620      	mov	r0, r4
 8001808:	f001 f986 	bl	8002b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f004 fb00 	bl	8005e12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001820:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fae3 	bl	8003df2 <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b08      	cmp	r3, #8
 8001834:	d10a      	bne.n	800184c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f004 fadd 	bl	8005df6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f002 0208 	and.w	r2, r2, #8
 800184a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f002 face 	bl	8003df2 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001860:	d10f      	bne.n	8001882 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f004 fb3f 	bl	8005ef0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fab3 	bl	8003df2 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001896:	d10f      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f004 fb12 	bl	8005ecc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fa98 	bl	8003df2 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d10a      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f004 fb20 	bl	8005f14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fa82 	bl	8003df2 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d115      	bne.n	8001924 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f004 fb10 	bl	8005f30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	430a      	orrs	r2, r1
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	e000      	b.n	8001924 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001922:	bf00      	nop
    }
  }
}
 8001924:	3734      	adds	r7, #52	; 0x34
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}

0800192a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_PCD_SetAddress+0x1a>
 8001940:	2302      	movs	r3, #2
 8001942:	e013      	b.n	800196c <HAL_PCD_SetAddress+0x42>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f002 f9e0 	bl	8003d22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	460b      	mov	r3, r1
 8001988:	803b      	strh	r3, [r7, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0f      	bge.n	80019ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 020f 	and.w	r2, r3, #15
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	705a      	strb	r2, [r3, #1]
 80019b8:	e00f      	b.n	80019da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019e6:	883a      	ldrh	r2, [r7, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	78ba      	ldrb	r2, [r7, #2]
 80019f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a04:	78bb      	ldrb	r3, [r7, #2]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d102      	bne.n	8001a10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_PCD_EP_Open+0xaa>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e00e      	b.n	8001a3c <HAL_PCD_EP_Open+0xc8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fb4b 	bl	80030c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da0f      	bge.n	8001a78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 020f 	and.w	r2, r3, #15
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3338      	adds	r3, #56	; 0x38
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
 8001a76:	e00f      	b.n	8001a98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 020f 	and.w	r2, r3, #15
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3304      	adds	r3, #4
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_EP_Close+0x6e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e00e      	b.n	8001ad0 <HAL_PCD_EP_Close+0x8c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fb89 	bl	80031d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	f003 020f 	and.w	r2, r3, #15
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	f001 fe64 	bl	8003818 <USB_EP0StartXfer>
 8001b50:	e008      	b.n	8001b64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6979      	ldr	r1, [r7, #20]
 8001b60:	f001 fc16 	bl	8003390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b90:	681b      	ldr	r3, [r3, #0]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	460b      	mov	r3, r1
 8001bac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	3338      	adds	r3, #56	; 0x38
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	f001 fe02 	bl	8003818 <USB_EP0StartXfer>
 8001c14:	e008      	b.n	8001c28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	f001 fbb4 	bl	8003390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d901      	bls.n	8001c50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e050      	b.n	8001cf2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0f      	bge.n	8001c78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3338      	adds	r3, #56	; 0x38
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00d      	b.n	8001c94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_EP_SetStall+0x82>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e01e      	b.n	8001cf2 <HAL_PCD_EP_SetStall+0xc0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff59 	bl	8003b7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	b2d9      	uxtb	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f002 f94a 	bl	8003f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d901      	bls.n	8001d18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e042      	b.n	8001d9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da0f      	bge.n	8001d40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
 8001d3e:	e00f      	b.n	8001d60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	3304      	adds	r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_PCD_EP_ClrStall+0x86>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e00e      	b.n	8001d9e <HAL_PCD_EP_ClrStall+0xa4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 ff61 	bl	8003c56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b08a      	sub	sp, #40	; 0x28
 8001daa:	af02      	add	r7, sp, #8
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	3338      	adds	r3, #56	; 0x38
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d901      	bls.n	8001dde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06c      	b.n	8001eb8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d902      	bls.n	8001dfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e02:	e02b      	b.n	8001e5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d902      	bls.n	8001e20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3303      	adds	r3, #3
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f001 fe3d 	bl	8003abe <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	441a      	add	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	441a      	add	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d809      	bhi.n	8001e86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d203      	bcs.n	8001e86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1be      	bne.n	8001e04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d811      	bhi.n	8001eb6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	333c      	adds	r3, #60	; 0x3c
 8001ed8:	3304      	adds	r3, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	f040 80a0 	bne.w	8002038 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d015      	beq.n	8001f2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f240 80dd 	bls.w	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80d7 	beq.w	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f24:	461a      	mov	r2, r3
 8001f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f2a:	6093      	str	r3, [r2, #8]
 8001f2c:	e0cb      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f44:	461a      	mov	r2, r3
 8001f46:	2320      	movs	r3, #32
 8001f48:	6093      	str	r3, [r2, #8]
 8001f4a:	e0bc      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80b7 	bne.w	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d90f      	bls.n	8001f80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	461a      	mov	r2, r3
 8001f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7c:	6093      	str	r3, [r2, #8]
 8001f7e:	e0a2      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	0159      	lsls	r1, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fa6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4419      	add	r1, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4403      	add	r3, r0
 8001ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ff8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d114      	bne.n	800202a <PCD_EP_OutXfrComplete_int+0x16a>
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002022:	461a      	mov	r2, r3
 8002024:	2101      	movs	r1, #1
 8002026:	f001 ffa9 	bl	8003f7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f003 feab 	bl	8005d8c <HAL_PCD_DataOutStageCallback>
 8002036:	e046      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d124      	bne.n	800208a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205c:	6093      	str	r3, [r2, #8]
 800205e:	e032      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002076:	461a      	mov	r2, r3
 8002078:	2320      	movs	r3, #32
 800207a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f003 fe82 	bl	8005d8c <HAL_PCD_DataOutStageCallback>
 8002088:	e01d      	b.n	80020c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d114      	bne.n	80020ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020b2:	461a      	mov	r2, r3
 80020b4:	2100      	movs	r1, #0
 80020b6:	f001 ff61 	bl	8003f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f003 fe63 	bl	8005d8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	4f54300a 	.word	0x4f54300a
 80020d4:	4f54310a 	.word	0x4f54310a

080020d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	333c      	adds	r3, #60	; 0x3c
 80020f0:	3304      	adds	r3, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a15      	ldr	r2, [pc, #84]	; (8002160 <PCD_EP_OutSetupPacket_int+0x88>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d90e      	bls.n	800212c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f003 fe1b 	bl	8005d68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <PCD_EP_OutSetupPacket_int+0x88>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d90c      	bls.n	8002154 <PCD_EP_OutSetupPacket_int+0x7c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f001 ff14 	bl	8003f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	4f54300a 	.word	0x4f54300a

08002164 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
 8002170:	4613      	mov	r3, r2
 8002172:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002182:	883b      	ldrh	r3, [r7, #0]
 8002184:	0419      	lsls	r1, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	430a      	orrs	r2, r1
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
 8002190:	e028      	b.n	80021e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e00d      	b.n	80021c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	3340      	adds	r3, #64	; 0x40
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	3301      	adds	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d3ec      	bcc.n	80021a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021cc:	883b      	ldrh	r3, [r7, #0]
 80021ce:	0418      	lsls	r0, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	4302      	orrs	r2, r0
 80021dc:	3340      	adds	r3, #64	; 0x40
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e25b      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d075      	beq.n	8002336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	4ba3      	ldr	r3, [pc, #652]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e236      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x74>
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a90      	ldr	r2, [pc, #576]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a8a      	ldr	r2, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a87      	ldr	r2, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022c4:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a83      	ldr	r2, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fb22 	bl	800092c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fb1e 	bl	800092c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1fb      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xc0>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fb0e 	bl	800092c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fb0a 	bl	800092c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1e7      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0xe8>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1bb      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4952      	ldr	r1, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fac3 	bl	800092c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe fabf 	bl	800092c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e19c      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe faa2 	bl	800092c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7fe fa9e 	bl	800092c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e17b      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d030      	beq.n	8002478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fa82 	bl	800092c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe fa7e 	bl	800092c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e15b      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x200>
 800244a:	e015      	b.n	8002478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fa6b 	bl	800092c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fa67 	bl	800092c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e144      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a0 	beq.w	80025c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fa2d 	bl	800092c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e011      	b.n	80024fa <HAL_RCC_OscConfig+0x2ce>
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
 80024e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fa20 	bl	800092c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0fd      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x4d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x2f0>
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a7c      	ldr	r2, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002524:	4b77      	ldr	r3, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a76      	ldr	r2, [pc, #472]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a73      	ldr	r2, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800253e:	4b71      	ldr	r3, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a70      	ldr	r2, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a6d      	ldr	r2, [pc, #436]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe f9e5 	bl	800092c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe f9e1 	bl	800092c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0bc      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x33a>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe f9cf 	bl	800092c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f9cb 	bl	800092c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0a6      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	4b56      	ldr	r3, [pc, #344]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b52      	ldr	r3, [pc, #328]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8092 	beq.w	80026f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d05c      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d141      	bne.n	8002668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b48      	ldr	r3, [pc, #288]	; (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe f99f 	bl	800092c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7fe f99b 	bl	800092c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e078      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002604:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	3b01      	subs	r3, #1
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4933      	ldr	r1, [pc, #204]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe f974 	bl	800092c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe f970 	bl	800092c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04d      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x41c>
 8002666:	e045      	b.n	80026f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe f95d 	bl	800092c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe f959 	bl	800092c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e036      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x44a>
 8002694:	e02e      	b.n	80026f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e029      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d115      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ca:	4013      	ands	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10d      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40007000 	.word	0x40007000
 8002704:	40023800 	.word	0x40023800
 8002708:	42470060 	.word	0x42470060

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe f896 	bl	800092c <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe f892 	bl	800092c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4601      	mov	r1, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	fa21 f303 	lsr.w	r3, r1, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fff6 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08006518 	.word	0x08006518
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ee:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d007      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x32>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d008      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x38>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 808d 	bne.w	8002a1e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002906:	60bb      	str	r3, [r7, #8]
       break;
 8002908:	e08c      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290a:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x160>)
 800290c:	60bb      	str	r3, [r7, #8]
      break;
 800290e:	e089      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291a:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d023      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	ea03 0501 	and.w	r5, r3, r1
 800293c:	ea04 0602 	and.w	r6, r4, r2
 8002940:	4a3d      	ldr	r2, [pc, #244]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002942:	fb02 f106 	mul.w	r1, r2, r6
 8002946:	2200      	movs	r2, #0
 8002948:	fb02 f205 	mul.w	r2, r2, r5
 800294c:	440a      	add	r2, r1
 800294e:	493a      	ldr	r1, [pc, #232]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002950:	fba5 0101 	umull	r0, r1, r5, r1
 8002954:	1853      	adds	r3, r2, r1
 8002956:	4619      	mov	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	f7fd fc31 	bl	80001c8 <__aeabi_uldivmod>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e049      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	f240 11ff 	movw	r1, #511	; 0x1ff
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	ea03 0501 	and.w	r5, r3, r1
 8002984:	ea04 0602 	and.w	r6, r4, r2
 8002988:	4629      	mov	r1, r5
 800298a:	4632      	mov	r2, r6
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	0154      	lsls	r4, r2, #5
 8002996:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800299a:	014b      	lsls	r3, r1, #5
 800299c:	4619      	mov	r1, r3
 800299e:	4622      	mov	r2, r4
 80029a0:	1b49      	subs	r1, r1, r5
 80029a2:	eb62 0206 	sbc.w	r2, r2, r6
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	0194      	lsls	r4, r2, #6
 80029b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029b4:	018b      	lsls	r3, r1, #6
 80029b6:	1a5b      	subs	r3, r3, r1
 80029b8:	eb64 0402 	sbc.w	r4, r4, r2
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	00e2      	lsls	r2, r4, #3
 80029c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029ca:	00d9      	lsls	r1, r3, #3
 80029cc:	460b      	mov	r3, r1
 80029ce:	4614      	mov	r4, r2
 80029d0:	195b      	adds	r3, r3, r5
 80029d2:	eb44 0406 	adc.w	r4, r4, r6
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	02a2      	lsls	r2, r4, #10
 80029e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029e4:	0299      	lsls	r1, r3, #10
 80029e6:	460b      	mov	r3, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	4621      	mov	r1, r4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f04f 0400 	mov.w	r4, #0
 80029f4:	461a      	mov	r2, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fd fbe6 	bl	80001c8 <__aeabi_uldivmod>
 80029fc:	4603      	mov	r3, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	60bb      	str	r3, [r7, #8]
      break;
 8002a1c:	e002      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a20:	60bb      	str	r3, [r7, #8]
      break;
 8002a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a24:	68bb      	ldr	r3, [r7, #8]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	017d7840 	.word	0x017d7840

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a54:	b084      	sub	sp, #16
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	f107 001c 	add.w	r0, r7, #28
 8002a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d122      	bne.n	8002ab2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 fac6 	bl	8004038 <USB_CoreReset>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e01a      	b.n	8002ae8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f001 faba 	bl	8004038 <USB_CoreReset>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8002ada:	e005      	b.n	8002ae8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10b      	bne.n	8002b06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f043 0206 	orr.w	r2, r3, #6
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b12:	b004      	add	sp, #16
 8002b14:	4770      	bx	lr
	...

08002b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d165      	bne.n	8002bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4a41      	ldr	r2, [pc, #260]	; (8002c34 <USB_SetTurnaroundTime+0x11c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d906      	bls.n	8002b42 <USB_SetTurnaroundTime+0x2a>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4a40      	ldr	r2, [pc, #256]	; (8002c38 <USB_SetTurnaroundTime+0x120>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d802      	bhi.n	8002b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e062      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <USB_SetTurnaroundTime+0x120>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d906      	bls.n	8002b58 <USB_SetTurnaroundTime+0x40>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <USB_SetTurnaroundTime+0x124>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d802      	bhi.n	8002b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002b52:	230e      	movs	r3, #14
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e057      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a38      	ldr	r2, [pc, #224]	; (8002c3c <USB_SetTurnaroundTime+0x124>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d906      	bls.n	8002b6e <USB_SetTurnaroundTime+0x56>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <USB_SetTurnaroundTime+0x128>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d802      	bhi.n	8002b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b68:	230d      	movs	r3, #13
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e04c      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <USB_SetTurnaroundTime+0x128>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d906      	bls.n	8002b84 <USB_SetTurnaroundTime+0x6c>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <USB_SetTurnaroundTime+0x12c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d802      	bhi.n	8002b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b7e:	230c      	movs	r3, #12
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e041      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <USB_SetTurnaroundTime+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d906      	bls.n	8002b9a <USB_SetTurnaroundTime+0x82>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <USB_SetTurnaroundTime+0x130>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d802      	bhi.n	8002b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b94:	230b      	movs	r3, #11
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e036      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <USB_SetTurnaroundTime+0x130>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d906      	bls.n	8002bb0 <USB_SetTurnaroundTime+0x98>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <USB_SetTurnaroundTime+0x134>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d802      	bhi.n	8002bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002baa:	230a      	movs	r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e02b      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <USB_SetTurnaroundTime+0x134>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d906      	bls.n	8002bc6 <USB_SetTurnaroundTime+0xae>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <USB_SetTurnaroundTime+0x138>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d802      	bhi.n	8002bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002bc0:	2309      	movs	r3, #9
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e020      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <USB_SetTurnaroundTime+0x138>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d906      	bls.n	8002bdc <USB_SetTurnaroundTime+0xc4>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <USB_SetTurnaroundTime+0x13c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d802      	bhi.n	8002bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e015      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <USB_SetTurnaroundTime+0x13c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d906      	bls.n	8002bf2 <USB_SetTurnaroundTime+0xda>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <USB_SetTurnaroundTime+0x140>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d802      	bhi.n	8002bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002bec:	2307      	movs	r3, #7
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e00a      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e007      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002bfe:	2309      	movs	r3, #9
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e001      	b.n	8002c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c04:	2309      	movs	r3, #9
 8002c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	00d8acbf 	.word	0x00d8acbf
 8002c38:	00e4e1bf 	.word	0x00e4e1bf
 8002c3c:	00f423ff 	.word	0x00f423ff
 8002c40:	0106737f 	.word	0x0106737f
 8002c44:	011a499f 	.word	0x011a499f
 8002c48:	01312cff 	.word	0x01312cff
 8002c4c:	014ca43f 	.word	0x014ca43f
 8002c50:	016e35ff 	.word	0x016e35ff
 8002c54:	01a6ab1f 	.word	0x01a6ab1f
 8002c58:	01e847ff 	.word	0x01e847ff

08002c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d106      	bne.n	8002ccc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	e00b      	b.n	8002ce4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	e001      	b.n	8002ce4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e003      	b.n	8002cec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002ce4:	2032      	movs	r0, #50	; 0x32
 8002ce6:	f7fd fe2d 	bl	8000944 <HAL_Delay>

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e009      	b.n	8002d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3340      	adds	r3, #64	; 0x40
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	3301      	adds	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0e      	cmp	r3, #14
 8002d2c:	d9f2      	bls.n	8002d14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11c      	bne.n	8002d6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d6c:	e00b      	b.n	8002d86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da0:	461a      	mov	r2, r3
 8002da2:	680b      	ldr	r3, [r1, #0]
 8002da4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10c      	bne.n	8002dc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002db2:	2100      	movs	r1, #0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f949 	bl	800304c <USB_SetDevSpeed>
 8002dba:	e008      	b.n	8002dce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f944 	bl	800304c <USB_SetDevSpeed>
 8002dc4:	e003      	b.n	8002dce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f93f 	bl	800304c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dce:	2110      	movs	r1, #16
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f8f3 	bl	8002fbc <USB_FlushTxFifo>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f911 	bl	8003008 <USB_FlushRxFifo>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	461a      	mov	r2, r3
 8002e04:	2300      	movs	r3, #0
 8002e06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e043      	b.n	8002ea2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e30:	d118      	bne.n	8002e64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e44:	461a      	mov	r2, r3
 8002e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e013      	b.n	8002e76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e008      	b.n	8002e76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	461a      	mov	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e82:	461a      	mov	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3b7      	bcc.n	8002e1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e043      	b.n	8002f38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec6:	d118      	bne.n	8002efa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e013      	b.n	8002f0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	e008      	b.n	8002f0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3301      	adds	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d3b7      	bcc.n	8002eb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <USB_DevInit+0x2c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f043 0208 	orr.w	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fb4:	b004      	add	sp, #16
 8002fb6:	4770      	bx	lr
 8002fb8:	803c3800 	.word	0x803c3800

08002fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <USB_FlushTxFifo+0x48>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e006      	b.n	8002ff6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d0f0      	beq.n	8002fd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	00030d40 	.word	0x00030d40

08003008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2210      	movs	r2, #16
 8003018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3301      	adds	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <USB_FlushRxFifo+0x40>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e006      	b.n	800303a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d0f0      	beq.n	800301a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	00030d40 	.word	0x00030d40

0800304c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0306 	and.w	r3, r3, #6
 8003096:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
 80030a2:	e00a      	b.n	80030ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d002      	beq.n	80030b0 <USB_GetDevSpeed+0x32>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d102      	bne.n	80030b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80030b0:	2302      	movs	r3, #2
 80030b2:	75fb      	strb	r3, [r7, #23]
 80030b4:	e001      	b.n	80030ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80030b6:	230f      	movs	r3, #15
 80030b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d13a      	bne.n	800315a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003102:	4313      	orrs	r3, r2
 8003104:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d155      	bne.n	80031c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	78db      	ldrb	r3, [r3, #3]
 8003136:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003138:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	059b      	lsls	r3, r3, #22
 800313e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003140:	4313      	orrs	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e036      	b.n	80031c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11a      	bne.n	80031c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	78db      	ldrb	r3, [r3, #3]
 80031ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031ae:	430b      	orrs	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d161      	bne.n	80032b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800320a:	d11f      	bne.n	800324c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800322a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	0151      	lsls	r1, r2, #5
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	440a      	add	r2, r1
 8003242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800324a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	b29b      	uxth	r3, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326c:	4013      	ands	r3, r2
 800326e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	b29b      	uxth	r3, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003290:	4013      	ands	r3, r2
 8003292:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	0159      	lsls	r1, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ae:	4619      	mov	r1, r3
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <USB_DeactivateEndpoint+0x1b0>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
 80032b6:	e060      	b.n	800337a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ce:	d11f      	bne.n	8003310 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	0151      	lsls	r1, r2, #5
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	440a      	add	r2, r1
 8003306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800330a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800330e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	43db      	mvns	r3, r3
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003330:	4013      	ands	r3, r2
 8003332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	43db      	mvns	r3, r3
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003354:	4013      	ands	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0159      	lsls	r1, r3, #5
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	440b      	add	r3, r1
 800336e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003372:	4619      	mov	r1, r3
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <USB_DeactivateEndpoint+0x1b4>)
 8003376:	4013      	ands	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	ec337800 	.word	0xec337800
 800338c:	eff37800 	.word	0xeff37800

08003390 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	f040 815c 	bne.w	800366a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d132      	bne.n	8003420 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	0151      	lsls	r1, r2, #5
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	440a      	add	r2, r1
 80033d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	0151      	lsls	r1, r2, #5
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	440a      	add	r2, r1
 80033f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	0151      	lsls	r1, r2, #5
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	440a      	add	r2, r1
 8003414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003418:	0cdb      	lsrs	r3, r3, #19
 800341a:	04db      	lsls	r3, r3, #19
 800341c:	6113      	str	r3, [r2, #16]
 800341e:	e074      	b.n	800350a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343a:	0cdb      	lsrs	r3, r3, #19
 800343c:	04db      	lsls	r3, r3, #19
 800343e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	440a      	add	r2, r1
 8003456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800345a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800345e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6959      	ldr	r1, [r3, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	440b      	add	r3, r1
 800347c:	1e59      	subs	r1, r3, #1
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	fbb1 f3f3 	udiv	r3, r1, r3
 8003486:	04d9      	lsls	r1, r3, #19
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <USB_EPStartXfer+0x370>)
 800348a:	400b      	ands	r3, r1
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	0148      	lsls	r0, r1, #5
 8003490:	69f9      	ldr	r1, [r7, #28]
 8003492:	4401      	add	r1, r0
 8003494:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003498:	4313      	orrs	r3, r2
 800349a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	0148      	lsls	r0, r1, #5
 80034b6:	69f9      	ldr	r1, [r7, #28]
 80034b8:	4401      	add	r1, r0
 80034ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034be:	4313      	orrs	r3, r2
 80034c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	78db      	ldrb	r3, [r3, #3]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d11f      	bne.n	800350a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d14b      	bne.n	80035a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	78db      	ldrb	r3, [r3, #3]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d128      	bne.n	8003586 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d110      	bne.n	8003566 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	440a      	add	r2, r1
 800355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e00f      	b.n	8003586 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	440a      	add	r2, r1
 800357c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	0151      	lsls	r1, r2, #5
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	440a      	add	r2, r1
 800359c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e12f      	b.n	8003808 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	78db      	ldrb	r3, [r3, #3]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d015      	beq.n	80035fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8117 	beq.w	8003808 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	69f9      	ldr	r1, [r7, #28]
 80035f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f6:	4313      	orrs	r3, r2
 80035f8:	634b      	str	r3, [r1, #52]	; 0x34
 80035fa:	e105      	b.n	8003808 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d110      	bne.n	800362e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	440a      	add	r2, r1
 8003622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	e00f      	b.n	800364e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	440a      	add	r2, r1
 8003644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	68d9      	ldr	r1, [r3, #12]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	b298      	uxth	r0, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa2b 	bl	8003abe <USB_WritePacket>
 8003668:	e0ce      	b.n	8003808 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003684:	0cdb      	lsrs	r3, r3, #19
 8003686:	04db      	lsls	r3, r3, #19
 8003688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d126      	bne.n	8003704 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	69b9      	ldr	r1, [r7, #24]
 80036ce:	0148      	lsls	r0, r1, #5
 80036d0:	69f9      	ldr	r1, [r7, #28]
 80036d2:	4401      	add	r1, r0
 80036d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036fa:	6113      	str	r3, [r2, #16]
 80036fc:	e036      	b.n	800376c <USB_EPStartXfer+0x3dc>
 80036fe:	bf00      	nop
 8003700:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4413      	add	r3, r2
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	8afb      	ldrh	r3, [r7, #22]
 800372a:	04d9      	lsls	r1, r3, #19
 800372c:	4b39      	ldr	r3, [pc, #228]	; (8003814 <USB_EPStartXfer+0x484>)
 800372e:	400b      	ands	r3, r1
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	0148      	lsls	r0, r1, #5
 8003734:	69f9      	ldr	r1, [r7, #28]
 8003736:	4401      	add	r1, r0
 8003738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	8af9      	ldrh	r1, [r7, #22]
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	69b9      	ldr	r1, [r7, #24]
 800375e:	0148      	lsls	r0, r1, #5
 8003760:	69f9      	ldr	r1, [r7, #28]
 8003762:	4401      	add	r1, r0
 8003764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	460a      	mov	r2, r1
 800378c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	78db      	ldrb	r3, [r3, #3]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d128      	bne.n	80037e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e00f      	b.n	80037e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	1ff80000 	.word	0x1ff80000

08003818 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80cd 	bne.w	80039d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d132      	bne.n	80038a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	440a      	add	r2, r1
 800387c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a0:	0cdb      	lsrs	r3, r3, #19
 80038a2:	04db      	lsls	r3, r3, #19
 80038a4:	6113      	str	r3, [r2, #16]
 80038a6:	e04e      	b.n	8003946 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c2:	0cdb      	lsrs	r3, r3, #19
 80038c4:	04db      	lsls	r3, r3, #19
 80038c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800391e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	6939      	ldr	r1, [r7, #16]
 8003938:	0148      	lsls	r0, r1, #5
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	4401      	add	r1, r0
 800393e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003942:	4313      	orrs	r3, r2
 8003944:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11e      	bne.n	800398a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e092      	b.n	8003ab0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d07e      	beq.n	8003ab0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ce:	4313      	orrs	r3, r2
 80039d0:	634b      	str	r3, [r1, #52]	; 0x34
 80039d2:	e06d      	b.n	8003ab0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ee:	0cdb      	lsrs	r3, r3, #19
 80039f0:	04db      	lsls	r3, r3, #19
 80039f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	6939      	ldr	r1, [r7, #16]
 8003a60:	0148      	lsls	r0, r1, #5
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	4401      	add	r1, r0
 8003a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10d      	bne.n	8003a90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	68d9      	ldr	r1, [r3, #12]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b089      	sub	sp, #36	; 0x24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	461a      	mov	r2, r3
 8003acc:	460b      	mov	r3, r1
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11a      	bne.n	8003b1a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ae4:	88bb      	ldrh	r3, [r7, #4]
 8003ae6:	3303      	adds	r3, #3
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e00f      	b.n	8003b12 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	031a      	lsls	r2, r3, #12
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afe:	461a      	mov	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3eb      	bcc.n	8003af2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3724      	adds	r7, #36	; 0x24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	3303      	adds	r3, #3
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	e00b      	b.n	8003b64 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3ef      	bcc.n	8003b4c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12c      	bne.n	8003bf0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db12      	blt.n	8003bce <USB_EPSetStall+0x54>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e02b      	b.n	8003c48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db12      	blt.n	8003c28 <USB_EPSetStall+0xae>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00f      	beq.n	8003c28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d128      	bne.n	8003cc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	78db      	ldrb	r3, [r3, #3]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d003      	beq.n	8003ca2 <USB_EPClearStall+0x4c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	78db      	ldrb	r3, [r3, #3]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d138      	bne.n	8003d14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e027      	b.n	8003d14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	78db      	ldrb	r3, [r3, #3]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d003      	beq.n	8003cf4 <USB_EPClearStall+0x9e>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d10f      	bne.n	8003d14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d88:	f023 0303 	bic.w	r3, r3, #3
 8003d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9c:	f023 0302 	bic.w	r3, r3, #2
 8003da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4013      	ands	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	b29b      	uxth	r3, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eae:	68bb      	ldr	r3, [r7, #8]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0301 	and.w	r3, r3, #1
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	460b      	mov	r3, r1
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	333c      	adds	r3, #60	; 0x3c
 8003f92:	3304      	adds	r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4a26      	ldr	r2, [pc, #152]	; (8004034 <USB_EP0_OutStart+0xb8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d90a      	bls.n	8003fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb0:	d101      	bne.n	8003fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e037      	b.n	8004026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe4:	f043 0318 	orr.w	r3, r3, #24
 8003fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10f      	bne.n	8004024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	4f54300a 	.word	0x4f54300a

08004038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a13      	ldr	r2, [pc, #76]	; (800409c <USB_CoreReset+0x64>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e01b      	b.n	800408e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	daf2      	bge.n	8004044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <USB_CoreReset+0x64>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d0f0      	beq.n	800406e <USB_CoreReset+0x36>

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	00030d40 	.word	0x00030d40

080040a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80040b0:	f002 f92c 	bl	800630c <malloc>
 80040b4:	4603      	mov	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040c6:	2302      	movs	r3, #2
 80040c8:	e066      	b.n	8004198 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7c1b      	ldrb	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d119      	bne.n	800410e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040de:	2202      	movs	r2, #2
 80040e0:	2181      	movs	r1, #129	; 0x81
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f001 ff99 	bl	800601a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040f2:	2202      	movs	r2, #2
 80040f4:	2101      	movs	r1, #1
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f001 ff8f 	bl	800601a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2210      	movs	r2, #16
 8004108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800410c:	e016      	b.n	800413c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	2202      	movs	r2, #2
 8004112:	2181      	movs	r1, #129	; 0x81
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f001 ff80 	bl	800601a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	2202      	movs	r2, #2
 8004124:	2101      	movs	r1, #1
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 ff77 	bl	800601a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2210      	movs	r2, #16
 8004138:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800413c:	2308      	movs	r3, #8
 800413e:	2203      	movs	r2, #3
 8004140:	2182      	movs	r1, #130	; 0x82
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 ff69 	bl	800601a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7c1b      	ldrb	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800417c:	2101      	movs	r1, #1
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f002 f83a 	bl	80061f8 <USBD_LL_PrepareReceive>
 8004184:	e007      	b.n	8004196 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	2101      	movs	r1, #1
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f002 f831 	bl	80061f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80041b0:	2181      	movs	r1, #129	; 0x81
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 ff57 	bl	8006066 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80041be:	2101      	movs	r1, #1
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 ff50 	bl	8006066 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80041ce:	2182      	movs	r1, #130	; 0x82
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f001 ff48 	bl	8006066 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004200:	4618      	mov	r0, r3
 8004202:	f002 f88b 	bl	800631c <free>
    pdev->pClassData = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004228:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03a      	beq.n	80042b8 <USBD_CDC_Setup+0xa0>
 8004242:	2b20      	cmp	r3, #32
 8004244:	f040 8097 	bne.w	8004376 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	88db      	ldrh	r3, [r3, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d029      	beq.n	80042a4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b25b      	sxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	da11      	bge.n	800427e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004266:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	88d2      	ldrh	r2, [r2, #6]
 800426c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800426e:	6939      	ldr	r1, [r7, #16]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	88db      	ldrh	r3, [r3, #6]
 8004274:	461a      	mov	r2, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fa9d 	bl	80057b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800427c:	e082      	b.n	8004384 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	785a      	ldrb	r2, [r3, #1]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	88db      	ldrh	r3, [r3, #6]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004294:	6939      	ldr	r1, [r7, #16]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	88db      	ldrh	r3, [r3, #6]
 800429a:	461a      	mov	r2, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f001 fab6 	bl	800580e <USBD_CtlPrepareRx>
    break;
 80042a2:	e06f      	b.n	8004384 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	7850      	ldrb	r0, [r2, #1]
 80042b0:	2200      	movs	r2, #0
 80042b2:	6839      	ldr	r1, [r7, #0]
 80042b4:	4798      	blx	r3
    break;
 80042b6:	e065      	b.n	8004384 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b0b      	cmp	r3, #11
 80042be:	d84f      	bhi.n	8004360 <USBD_CDC_Setup+0x148>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <USBD_CDC_Setup+0xb0>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	0800436f 	.word	0x0800436f
 80042d0:	08004361 	.word	0x08004361
 80042d4:	08004361 	.word	0x08004361
 80042d8:	08004361 	.word	0x08004361
 80042dc:	08004361 	.word	0x08004361
 80042e0:	08004361 	.word	0x08004361
 80042e4:	08004361 	.word	0x08004361
 80042e8:	08004361 	.word	0x08004361
 80042ec:	08004361 	.word	0x08004361
 80042f0:	08004321 	.word	0x08004321
 80042f4:	08004349 	.word	0x08004349
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d107      	bne.n	8004312 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	2202      	movs	r2, #2
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 fa53 	bl	80057b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004310:	e030      	b.n	8004374 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 f9dd 	bl	80056d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800431a:	2303      	movs	r3, #3
 800431c:	75fb      	strb	r3, [r7, #23]
      break;
 800431e:	e029      	b.n	8004374 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800432a:	f107 030f 	add.w	r3, r7, #15
 800432e:	2201      	movs	r2, #1
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 fa3f 	bl	80057b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004338:	e01c      	b.n	8004374 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800433a:	6839      	ldr	r1, [r7, #0]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 f9c9 	bl	80056d4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004342:	2303      	movs	r3, #3
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	e015      	b.n	8004374 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800434e:	2b03      	cmp	r3, #3
 8004350:	d00f      	beq.n	8004372 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 f9bd 	bl	80056d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800435a:	2303      	movs	r3, #3
 800435c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800435e:	e008      	b.n	8004372 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 f9b6 	bl	80056d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004368:	2303      	movs	r3, #3
 800436a:	75fb      	strb	r3, [r7, #23]
      break;
 800436c:	e002      	b.n	8004374 <USBD_CDC_Setup+0x15c>
      break;
 800436e:	bf00      	nop
 8004370:	e008      	b.n	8004384 <USBD_CDC_Setup+0x16c>
      break;
 8004372:	bf00      	nop
    }
    break;
 8004374:	e006      	b.n	8004384 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f001 f9ab 	bl	80056d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800437e:	2303      	movs	r3, #3
 8004380:	75fb      	strb	r3, [r7, #23]
    break;
 8004382:	bf00      	nop
  }

  return (uint8_t)ret;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop

08004390 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80043a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e049      	b.n	8004446 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3318      	adds	r3, #24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d029      	beq.n	8004424 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	3318      	adds	r3, #24
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	78f9      	ldrb	r1, [r7, #3]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	460b      	mov	r3, r1
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	1a5b      	subs	r3, r3, r1
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4403      	add	r3, r0
 80043f0:	3344      	adds	r3, #68	; 0x44
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80043f8:	fb03 f301 	mul.w	r3, r3, r1
 80043fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d110      	bne.n	8004424 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3318      	adds	r3, #24
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004416:	78f9      	ldrb	r1, [r7, #3]
 8004418:	2300      	movs	r3, #0
 800441a:	2200      	movs	r2, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 feca 	bl	80061b6 <USBD_LL_Transmit>
 8004422:	e00f      	b.n	8004444 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800446c:	2303      	movs	r3, #3
 800446e:	e015      	b.n	800449c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 fee0 	bl	800623a <USBD_LL_GetRxDataSize>
 800447a:	4602      	mov	r2, r0
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004496:	4611      	mov	r1, r2
 8004498:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <USBD_CDC_EP0_RxReady+0x46>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044c4:	2bff      	cmp	r3, #255	; 0xff
 80044c6:	d010      	beq.n	80044ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80044d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044de:	b292      	uxth	r2, r2
 80044e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2243      	movs	r2, #67	; 0x43
 8004500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004502:	4b03      	ldr	r3, [pc, #12]	; (8004510 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000094 	.word	0x20000094

08004514 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2243      	movs	r2, #67	; 0x43
 8004520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004522:	4b03      	ldr	r3, [pc, #12]	; (8004530 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000050 	.word	0x20000050

08004534 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2243      	movs	r2, #67	; 0x43
 8004540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004542:	4b03      	ldr	r3, [pc, #12]	; (8004550 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	200000d8 	.word	0x200000d8

08004554 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	220a      	movs	r2, #10
 8004560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004562:	4b03      	ldr	r3, [pc, #12]	; (8004570 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	2000000c 	.word	0x2000000c

08004574 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004584:	2303      	movs	r3, #3
 8004586:	e004      	b.n	8004592 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045e0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004606:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004616:	2303      	movs	r3, #3
 8004618:	e01a      	b.n	8004650 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2201      	movs	r2, #1
 8004628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004642:	2181      	movs	r1, #129	; 0x81
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 fdb6 	bl	80061b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004666:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004672:	2303      	movs	r3, #3
 8004674:	e016      	b.n	80046a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7c1b      	ldrb	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004688:	2101      	movs	r1, #1
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 fdb4 	bl	80061f8 <USBD_LL_PrepareReceive>
 8004690:	e007      	b.n	80046a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	2101      	movs	r1, #1
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f001 fdab 	bl	80061f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e025      	b.n	8004710 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	79fa      	ldrb	r2, [r7, #7]
 8004702:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f001 fc21 	bl	8005f4c <USBD_LL_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800472c:	2303      	movs	r3, #3
 800472e:	e010      	b.n	8004752 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f107 020e 	add.w	r2, r7, #14
 8004744:	4610      	mov	r0, r2
 8004746:	4798      	blx	r3
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f001 fc3e 	bl	8005fe4 <USBD_LL_Start>
 8004768:	4603      	mov	r3, r0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004794:	2303      	movs	r3, #3
 8004796:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	4611      	mov	r1, r2
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	4611      	mov	r1, r2
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
  }

  return USBD_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ff2c 	bl	8005660 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2b01      	cmp	r3, #1
 800482a:	d00e      	beq.n	800484a <USBD_LL_SetupStage+0x5a>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d302      	bcc.n	8004836 <USBD_LL_SetupStage+0x46>
 8004830:	2b02      	cmp	r3, #2
 8004832:	d014      	beq.n	800485e <USBD_LL_SetupStage+0x6e>
 8004834:	e01d      	b.n	8004872 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa18 	bl	8004c74 <USBD_StdDevReq>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
      break;
 8004848:	e020      	b.n	800488c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa7c 	bl	8004d50 <USBD_StdItfReq>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e016      	b.n	800488c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fab8 	bl	8004ddc <USBD_StdEPReq>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e00c      	b.n	800488c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800487c:	b2db      	uxtb	r3, r3
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 fc0f 	bl	80060a4 <USBD_LL_StallEP>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
      break;
 800488a:	bf00      	nop
  }

  return ret;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	460b      	mov	r3, r1
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048a4:	7afb      	ldrb	r3, [r7, #11]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d137      	bne.n	800491a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80048b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d14a      	bne.n	8004952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d913      	bls.n	80048f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	1ad2      	subs	r2, r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4293      	cmp	r3, r2
 80048e0:	bf28      	it	cs
 80048e2:	4613      	movcs	r3, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 ffad 	bl	8005848 <USBD_CtlContinueRx>
 80048ee:	e030      	b.n	8004952 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004902:	2b03      	cmp	r3, #3
 8004904:	d105      	bne.n	8004912 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 ffa9 	bl	800586a <USBD_CtlSendStatus>
 8004918:	e01b      	b.n	8004952 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800492c:	2b03      	cmp	r3, #3
 800492e:	d10e      	bne.n	800494e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	7afa      	ldrb	r2, [r7, #11]
 800493a:	4611      	mov	r1, r2
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	4798      	blx	r3
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	e002      	b.n	8004954 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800494e:	2303      	movs	r3, #3
 8004950:	e000      	b.n	8004954 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	460b      	mov	r3, r1
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d16a      	bne.n	8004a46 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3314      	adds	r3, #20
 8004974:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800497c:	2b02      	cmp	r3, #2
 800497e:	d155      	bne.n	8004a2c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d914      	bls.n	80049b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	461a      	mov	r2, r3
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 ff22 	bl	80057ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049a8:	2300      	movs	r3, #0
 80049aa:	2200      	movs	r2, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 fc22 	bl	80061f8 <USBD_LL_PrepareReceive>
 80049b4:	e03a      	b.n	8004a2c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d11c      	bne.n	80049fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d316      	bcc.n	80049fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80049d8:	429a      	cmp	r2, r3
 80049da:	d20f      	bcs.n	80049fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80049dc:	2200      	movs	r2, #0
 80049de:	2100      	movs	r1, #0
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 ff03 	bl	80057ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049ee:	2300      	movs	r3, #0
 80049f0:	2200      	movs	r2, #0
 80049f2:	2100      	movs	r1, #0
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f001 fbff 	bl	80061f8 <USBD_LL_PrepareReceive>
 80049fa:	e017      	b.n	8004a2c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d105      	bne.n	8004a1e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f001 fb3f 	bl	80060a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 ff32 	bl	8005890 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d123      	bne.n	8004a7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fe9b 	bl	8004772 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a44:	e01b      	b.n	8004a7e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d10e      	bne.n	8004a7a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	7afa      	ldrb	r2, [r7, #11]
 8004a66:	4611      	mov	r1, r2
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	4798      	blx	r3
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	e002      	b.n	8004a80 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e000      	b.n	8004a80 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6852      	ldr	r2, [r2, #4]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 faa1 	bl	800601a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	2200      	movs	r2, #0
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 fa93 	bl	800601a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	; 0x40
 8004afe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2204      	movs	r2, #4
 8004b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d105      	bne.n	8004b72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d10b      	bne.n	8004baa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
  }

  return USBD_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c54:	8a3b      	ldrh	r3, [r7, #16]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	b21a      	sxth	r2, r3
 8004c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b21b      	sxth	r3, r3
 8004c62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004c64:	89fb      	ldrh	r3, [r7, #14]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d004      	beq.n	8004c98 <USBD_StdDevReq+0x24>
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d002      	beq.n	8004c98 <USBD_StdDevReq+0x24>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <USBD_StdDevReq+0x38>
 8004c96:	e050      	b.n	8004d3a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8004caa:	e04b      	b.n	8004d44 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	d83c      	bhi.n	8004d2e <USBD_StdDevReq+0xba>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <USBD_StdDevReq+0x48>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d2f 	.word	0x08004d2f
 8004cc8:	08004d1b 	.word	0x08004d1b
 8004ccc:	08004d2f 	.word	0x08004d2f
 8004cd0:	08004cef 	.word	0x08004cef
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004d2f 	.word	0x08004d2f
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004cf9 	.word	0x08004cf9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9ce 	bl	8005088 <USBD_GetDescriptor>
      break;
 8004cec:	e024      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb33 	bl	800535c <USBD_SetAddress>
      break;
 8004cf6:	e01f      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fb70 	bl	80053e0 <USBD_SetConfig>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e018      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fc0d 	bl	8005528 <USBD_GetConfig>
      break;
 8004d0e:	e013      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fc3c 	bl	8005590 <USBD_GetStatus>
      break;
 8004d18:	e00e      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fc6a 	bl	80055f6 <USBD_SetFeature>
      break;
 8004d22:	e009      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fc79 	bl	800561e <USBD_ClrFeature>
      break;
 8004d2c:	e004      	b.n	8004d38 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fccf 	bl	80056d4 <USBD_CtlError>
      break;
 8004d36:	bf00      	nop
    }
    break;
 8004d38:	e004      	b.n	8004d44 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fcc9 	bl	80056d4 <USBD_CtlError>
    break;
 8004d42:	bf00      	nop
  }

  return ret;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop

08004d50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d003      	beq.n	8004d72 <USBD_StdItfReq+0x22>
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d001      	beq.n	8004d72 <USBD_StdItfReq+0x22>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12a      	bne.n	8004dc8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d81d      	bhi.n	8004dba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	889b      	ldrh	r3, [r3, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d813      	bhi.n	8004db0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	88db      	ldrh	r3, [r3, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d110      	bne.n	8004dc4 <USBD_StdItfReq+0x74>
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10d      	bne.n	8004dc4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd5e 	bl	800586a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004dae:	e009      	b.n	8004dc4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fc8e 	bl	80056d4 <USBD_CtlError>
      break;
 8004db8:	e004      	b.n	8004dc4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fc89 	bl	80056d4 <USBD_CtlError>
      break;
 8004dc2:	e000      	b.n	8004dc6 <USBD_StdItfReq+0x76>
      break;
 8004dc4:	bf00      	nop
    }
    break;
 8004dc6:	e004      	b.n	8004dd2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fc82 	bl	80056d4 <USBD_CtlError>
    break;
 8004dd0:	bf00      	nop
  }

  return ret;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	889b      	ldrh	r3, [r3, #4]
 8004dee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d004      	beq.n	8004e06 <USBD_StdEPReq+0x2a>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d002      	beq.n	8004e06 <USBD_StdEPReq+0x2a>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <USBD_StdEPReq+0x3e>
 8004e04:	e135      	b.n	8005072 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
    break;
 8004e18:	e130      	b.n	800507c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d03e      	beq.n	8004ea0 <USBD_StdEPReq+0xc4>
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d002      	beq.n	8004e2c <USBD_StdEPReq+0x50>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d077      	beq.n	8004f1a <USBD_StdEPReq+0x13e>
 8004e2a:	e11c      	b.n	8005066 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d002      	beq.n	8004e3c <USBD_StdEPReq+0x60>
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d015      	beq.n	8004e66 <USBD_StdEPReq+0x8a>
 8004e3a:	e02b      	b.n	8004e94 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <USBD_StdEPReq+0x80>
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d009      	beq.n	8004e5c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 f929 	bl	80060a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f925 	bl	80060a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004e5a:	e020      	b.n	8004e9e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fc38 	bl	80056d4 <USBD_CtlError>
        break;
 8004e64:	e01b      	b.n	8004e9e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10e      	bne.n	8004e8c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <USBD_StdEPReq+0xb0>
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d008      	beq.n	8004e8c <USBD_StdEPReq+0xb0>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	88db      	ldrh	r3, [r3, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e82:	7bbb      	ldrb	r3, [r7, #14]
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 f90c 	bl	80060a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fcec 	bl	800586a <USBD_CtlSendStatus>

        break;
 8004e92:	e004      	b.n	8004e9e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc1c 	bl	80056d4 <USBD_CtlError>
        break;
 8004e9c:	bf00      	nop
      }
      break;
 8004e9e:	e0e7      	b.n	8005070 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d002      	beq.n	8004eb0 <USBD_StdEPReq+0xd4>
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d015      	beq.n	8004eda <USBD_StdEPReq+0xfe>
 8004eae:	e02d      	b.n	8004f0c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <USBD_StdEPReq+0xf4>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d009      	beq.n	8004ed0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 f8ef 	bl	80060a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 f8eb 	bl	80060a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004ece:	e023      	b.n	8004f18 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fbfe 	bl	80056d4 <USBD_CtlError>
        break;
 8004ed8:	e01e      	b.n	8004f18 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	885b      	ldrh	r3, [r3, #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d119      	bne.n	8004f16 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004eec:	7bbb      	ldrb	r3, [r7, #14]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 f8f6 	bl	80060e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fcb7 	bl	800586a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
        }
        break;
 8004f0a:	e004      	b.n	8004f16 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fbe0 	bl	80056d4 <USBD_CtlError>
        break;
 8004f14:	e000      	b.n	8004f18 <USBD_StdEPReq+0x13c>
        break;
 8004f16:	bf00      	nop
      }
      break;
 8004f18:	e0aa      	b.n	8005070 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d002      	beq.n	8004f2a <USBD_StdEPReq+0x14e>
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d032      	beq.n	8004f8e <USBD_StdEPReq+0x1b2>
 8004f28:	e097      	b.n	800505a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <USBD_StdEPReq+0x164>
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d004      	beq.n	8004f40 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fbcb 	bl	80056d4 <USBD_CtlError>
          break;
 8004f3e:	e091      	b.n	8005064 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da0b      	bge.n	8004f60 <USBD_StdEPReq+0x184>
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	3310      	adds	r3, #16
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	e00b      	b.n	8004f78 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	3304      	adds	r3, #4
 8004f78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2202      	movs	r2, #2
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fc15 	bl	80057b6 <USBD_CtlSendData>
        break;
 8004f8c:	e06a      	b.n	8005064 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da11      	bge.n	8004fba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f96:	7bbb      	ldrb	r3, [r7, #14]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d117      	bne.n	8004fe0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb8e 	bl	80056d4 <USBD_CtlError>
            break;
 8004fb8:	e054      	b.n	8005064 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fb7b 	bl	80056d4 <USBD_CtlError>
            break;
 8004fde:	e041      	b.n	8005064 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	da0b      	bge.n	8005000 <USBD_StdEPReq+0x224>
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	3310      	adds	r3, #16
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	e00b      	b.n	8005018 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005000:	7bbb      	ldrb	r3, [r7, #14]
 8005002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	3304      	adds	r3, #4
 8005018:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <USBD_StdEPReq+0x24a>
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d103      	bne.n	800502e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e00e      	b.n	800504c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 f874 	bl	8006120 <USBD_LL_IsStallEP>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e002      	b.n	800504c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2202      	movs	r2, #2
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fbaf 	bl	80057b6 <USBD_CtlSendData>
          break;
 8005058:	e004      	b.n	8005064 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fb39 	bl	80056d4 <USBD_CtlError>
        break;
 8005062:	bf00      	nop
      }
      break;
 8005064:	e004      	b.n	8005070 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fb33 	bl	80056d4 <USBD_CtlError>
      break;
 800506e:	bf00      	nop
    }
    break;
 8005070:	e004      	b.n	800507c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fb2d 	bl	80056d4 <USBD_CtlError>
    break;
 800507a:	bf00      	nop
  }

  return ret;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	885b      	ldrh	r3, [r3, #2]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	f200 8128 	bhi.w	80052fe <USBD_GetDescriptor+0x276>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <USBD_GetDescriptor+0x2c>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	08005129 	.word	0x08005129
 80050c0:	080052ff 	.word	0x080052ff
 80050c4:	080052ff 	.word	0x080052ff
 80050c8:	0800529f 	.word	0x0800529f
 80050cc:	080052cb 	.word	0x080052cb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	7c12      	ldrb	r2, [r2, #16]
 80050dc:	f107 0108 	add.w	r1, r7, #8
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
 80050e4:	60f8      	str	r0, [r7, #12]
    break;
 80050e6:	e112      	b.n	800530e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	7c1b      	ldrb	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f107 0208 	add.w	r2, r7, #8
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800510a:	e100      	b.n	800530e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	f107 0208 	add.w	r2, r7, #8
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
 800511c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
    break;
 8005126:	e0f2      	b.n	800530e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	885b      	ldrh	r3, [r3, #2]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b05      	cmp	r3, #5
 8005130:	f200 80ac 	bhi.w	800528c <USBD_GetDescriptor+0x204>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <USBD_GetDescriptor+0xb4>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005155 	.word	0x08005155
 8005140:	08005189 	.word	0x08005189
 8005144:	080051bd 	.word	0x080051bd
 8005148:	080051f1 	.word	0x080051f1
 800514c:	08005225 	.word	0x08005225
 8005150:	08005259 	.word	0x08005259
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	7c12      	ldrb	r2, [r2, #16]
 800516c:	f107 0108 	add.w	r1, r7, #8
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
 8005174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005176:	e091      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 faaa 	bl	80056d4 <USBD_CtlError>
        err++;
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	3301      	adds	r3, #1
 8005184:	72fb      	strb	r3, [r7, #11]
      break;
 8005186:	e089      	b.n	800529c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	7c12      	ldrb	r2, [r2, #16]
 80051a0:	f107 0108 	add.w	r1, r7, #8
 80051a4:	4610      	mov	r0, r2
 80051a6:	4798      	blx	r3
 80051a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051aa:	e077      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa90 	bl	80056d4 <USBD_CtlError>
        err++;
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	3301      	adds	r3, #1
 80051b8:	72fb      	strb	r3, [r7, #11]
      break;
 80051ba:	e06f      	b.n	800529c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	7c12      	ldrb	r2, [r2, #16]
 80051d4:	f107 0108 	add.w	r1, r7, #8
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
 80051dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051de:	e05d      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa76 	bl	80056d4 <USBD_CtlError>
        err++;
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	3301      	adds	r3, #1
 80051ec:	72fb      	strb	r3, [r7, #11]
      break;
 80051ee:	e055      	b.n	800529c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	7c12      	ldrb	r2, [r2, #16]
 8005208:	f107 0108 	add.w	r1, r7, #8
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
 8005210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005212:	e043      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa5c 	bl	80056d4 <USBD_CtlError>
        err++;
 800521c:	7afb      	ldrb	r3, [r7, #11]
 800521e:	3301      	adds	r3, #1
 8005220:	72fb      	strb	r3, [r7, #11]
      break;
 8005222:	e03b      	b.n	800529c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	7c12      	ldrb	r2, [r2, #16]
 800523c:	f107 0108 	add.w	r1, r7, #8
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
 8005244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005246:	e029      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa42 	bl	80056d4 <USBD_CtlError>
        err++;
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	3301      	adds	r3, #1
 8005254:	72fb      	strb	r3, [r7, #11]
      break;
 8005256:	e021      	b.n	800529c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	7c12      	ldrb	r2, [r2, #16]
 8005270:	f107 0108 	add.w	r1, r7, #8
 8005274:	4610      	mov	r0, r2
 8005276:	4798      	blx	r3
 8005278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800527a:	e00f      	b.n	800529c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa28 	bl	80056d4 <USBD_CtlError>
        err++;
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	3301      	adds	r3, #1
 8005288:	72fb      	strb	r3, [r7, #11]
      break;
 800528a:	e007      	b.n	800529c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa20 	bl	80056d4 <USBD_CtlError>
      err++;
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	3301      	adds	r3, #1
 8005298:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800529a:	bf00      	nop
    }
    break;
 800529c:	e037      	b.n	800530e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7c1b      	ldrb	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	f107 0208 	add.w	r2, r7, #8
 80052b2:	4610      	mov	r0, r2
 80052b4:	4798      	blx	r3
 80052b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80052b8:	e029      	b.n	800530e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa09 	bl	80056d4 <USBD_CtlError>
      err++;
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	3301      	adds	r3, #1
 80052c6:	72fb      	strb	r3, [r7, #11]
    break;
 80052c8:	e021      	b.n	800530e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7c1b      	ldrb	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f107 0208 	add.w	r2, r7, #8
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
 80052e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	2207      	movs	r2, #7
 80052ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80052ec:	e00f      	b.n	800530e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f9ef 	bl	80056d4 <USBD_CtlError>
      err++;
 80052f6:	7afb      	ldrb	r3, [r7, #11]
 80052f8:	3301      	adds	r3, #1
 80052fa:	72fb      	strb	r3, [r7, #11]
    break;
 80052fc:	e007      	b.n	800530e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f9e7 	bl	80056d4 <USBD_CtlError>
    err++;
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	3301      	adds	r3, #1
 800530a:	72fb      	strb	r3, [r7, #11]
    break;
 800530c:	bf00      	nop
  }

  if (err != 0U)
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11e      	bne.n	8005352 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	88db      	ldrh	r3, [r3, #6]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d016      	beq.n	800534a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800531c:	893b      	ldrh	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00e      	beq.n	8005340 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	88da      	ldrh	r2, [r3, #6]
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	4293      	cmp	r3, r2
 800532a:	bf28      	it	cs
 800532c:	4613      	movcs	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	461a      	mov	r2, r3
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa3c 	bl	80057b6 <USBD_CtlSendData>
 800533e:	e009      	b.n	8005354 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9c6 	bl	80056d4 <USBD_CtlError>
 8005348:	e004      	b.n	8005354 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa8d 	bl	800586a <USBD_CtlSendStatus>
 8005350:	e000      	b.n	8005354 <USBD_GetDescriptor+0x2cc>
    return;
 8005352:	bf00      	nop
    }
  }
}
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop

0800535c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	889b      	ldrh	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d130      	bne.n	80053d0 <USBD_SetAddress+0x74>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	88db      	ldrh	r3, [r3, #6]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d12c      	bne.n	80053d0 <USBD_SetAddress+0x74>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	2b7f      	cmp	r3, #127	; 0x7f
 800537c:	d828      	bhi.n	80053d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	885b      	ldrh	r3, [r3, #2]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005390:	2b03      	cmp	r3, #3
 8005392:	d104      	bne.n	800539e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f99c 	bl	80056d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539c:	e01c      	b.n	80053d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fee4 	bl	8006178 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa5a 	bl	800586a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c4:	e008      	b.n	80053d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ce:	e003      	b.n	80053d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f97e 	bl	80056d4 <USBD_CtlError>
  }
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	885b      	ldrh	r3, [r3, #2]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <USBD_SetConfig+0x144>)
 80053f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80053f8:	4b4a      	ldr	r3, [pc, #296]	; (8005524 <USBD_SetConfig+0x144>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d905      	bls.n	800540c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f966 	bl	80056d4 <USBD_CtlError>
    return USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	e087      	b.n	800551c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005412:	2b02      	cmp	r3, #2
 8005414:	d002      	beq.n	800541c <USBD_SetConfig+0x3c>
 8005416:	2b03      	cmp	r3, #3
 8005418:	d025      	beq.n	8005466 <USBD_SetConfig+0x86>
 800541a:	e071      	b.n	8005500 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800541c:	4b41      	ldr	r3, [pc, #260]	; (8005524 <USBD_SetConfig+0x144>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01c      	beq.n	800545e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005424:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <USBD_SetConfig+0x144>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800542e:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <USBD_SetConfig+0x144>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff f9a7 	bl	8004788 <USBD_SetClassConfig>
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f944 	bl	80056d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800544c:	e065      	b.n	800551a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa0b 	bl	800586a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2203      	movs	r2, #3
 8005458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800545c:	e05d      	b.n	800551a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa03 	bl	800586a <USBD_CtlSendStatus>
    break;
 8005464:	e059      	b.n	800551a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <USBD_SetConfig+0x144>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d112      	bne.n	8005494 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <USBD_SetConfig+0x144>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <USBD_SetConfig+0x144>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff f99a 	bl	80047c0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f9ec 	bl	800586a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005492:	e042      	b.n	800551a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005494:	4b23      	ldr	r3, [pc, #140]	; (8005524 <USBD_SetConfig+0x144>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d02a      	beq.n	80054f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff f988 	bl	80047c0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <USBD_SetConfig+0x144>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80054ba:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <USBD_SetConfig+0x144>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff f961 	bl	8004788 <USBD_SetClassConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8fe 	bl	80056d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f96d 	bl	80047c0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80054ee:	e014      	b.n	800551a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f9ba 	bl	800586a <USBD_CtlSendStatus>
    break;
 80054f6:	e010      	b.n	800551a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9b6 	bl	800586a <USBD_CtlSendStatus>
    break;
 80054fe:	e00c      	b.n	800551a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8e6 	bl	80056d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <USBD_SetConfig+0x144>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff f956 	bl	80047c0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005514:	2303      	movs	r3, #3
 8005516:	73fb      	strb	r3, [r7, #15]
    break;
 8005518:	bf00      	nop
  }

  return ret;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000208 	.word	0x20000208

08005528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	88db      	ldrh	r3, [r3, #6]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d004      	beq.n	8005544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f8c9 	bl	80056d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005542:	e021      	b.n	8005588 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554a:	2b01      	cmp	r3, #1
 800554c:	db17      	blt.n	800557e <USBD_GetConfig+0x56>
 800554e:	2b02      	cmp	r3, #2
 8005550:	dd02      	ble.n	8005558 <USBD_GetConfig+0x30>
 8005552:	2b03      	cmp	r3, #3
 8005554:	d00b      	beq.n	800556e <USBD_GetConfig+0x46>
 8005556:	e012      	b.n	800557e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3308      	adds	r3, #8
 8005562:	2201      	movs	r2, #1
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f925 	bl	80057b6 <USBD_CtlSendData>
      break;
 800556c:	e00c      	b.n	8005588 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2201      	movs	r2, #1
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f91d 	bl	80057b6 <USBD_CtlSendData>
      break;
 800557c:	e004      	b.n	8005588 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f8a7 	bl	80056d4 <USBD_CtlError>
      break;
 8005586:	bf00      	nop
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d81e      	bhi.n	80055e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	88db      	ldrh	r3, [r3, #6]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d004      	beq.n	80055b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f88f 	bl	80056d4 <USBD_CtlError>
      break;
 80055b6:	e01a      	b.n	80055ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f043 0202 	orr.w	r2, r3, #2
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	330c      	adds	r3, #12
 80055d8:	2202      	movs	r2, #2
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8ea 	bl	80057b6 <USBD_CtlSendData>
    break;
 80055e2:	e004      	b.n	80055ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f874 	bl	80056d4 <USBD_CtlError>
    break;
 80055ec:	bf00      	nop
  }
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	885b      	ldrh	r3, [r3, #2]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d106      	bne.n	8005616 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f92a 	bl	800586a <USBD_CtlSendStatus>
  }
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800562e:	3b01      	subs	r3, #1
 8005630:	2b02      	cmp	r3, #2
 8005632:	d80b      	bhi.n	800564c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	885b      	ldrh	r3, [r3, #2]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d10c      	bne.n	8005656 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f910 	bl	800586a <USBD_CtlSendStatus>
      }
      break;
 800564a:	e004      	b.n	8005656 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f840 	bl	80056d4 <USBD_CtlError>
      break;
 8005654:	e000      	b.n	8005658 <USBD_ClrFeature+0x3a>
      break;
 8005656:	bf00      	nop
  }
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff fad3 	bl	8004c36 <SWAPBYTE>
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff fac6 	bl	8004c36 <SWAPBYTE>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fab9 	bl	8004c36 <SWAPBYTE>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	80da      	strh	r2, [r3, #6]
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80056de:	2180      	movs	r1, #128	; 0x80
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fcdf 	bl	80060a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fcdb 	bl	80060a4 <USBD_LL_StallEP>
}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d036      	beq.n	800577a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005710:	6938      	ldr	r0, [r7, #16]
 8005712:	f000 f836 	bl	8005782 <USBD_GetLen>
 8005716:	4603      	mov	r3, r0
 8005718:	3301      	adds	r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4413      	add	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	3301      	adds	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4413      	add	r3, r2
 800573c:	2203      	movs	r2, #3
 800573e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	3301      	adds	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005746:	e013      	b.n	8005770 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	3301      	adds	r3, #1
 8005758:	613b      	str	r3, [r7, #16]
    idx++;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	3301      	adds	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
    idx++;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	3301      	adds	r3, #1
 800576e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e7      	bne.n	8005748 <USBD_GetString+0x52>
 8005778:	e000      	b.n	800577c <USBD_GetString+0x86>
    return;
 800577a:	bf00      	nop
  }
}
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005792:	e005      	b.n	80057a0 <USBD_GetLen+0x1e>
  {
    len++;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	3301      	adds	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3301      	adds	r3, #1
 800579e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f5      	bne.n	8005794 <USBD_GetLen+0x12>
  }

  return len;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	2100      	movs	r1, #0
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fcea 	bl	80061b6 <USBD_LL_Transmit>

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	2100      	movs	r1, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fcd9 	bl	80061b6 <USBD_LL_Transmit>

  return USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2203      	movs	r2, #3
 800581e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	2100      	movs	r1, #0
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fcdd 	bl	80061f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	2100      	movs	r1, #0
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fccc 	bl	80061f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800587a:	2300      	movs	r3, #0
 800587c:	2200      	movs	r2, #0
 800587e:	2100      	movs	r1, #0
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fc98 	bl	80061b6 <USBD_LL_Transmit>

  return USBD_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2205      	movs	r2, #5
 800589c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058a0:	2300      	movs	r3, #0
 80058a2:	2200      	movs	r2, #0
 80058a4:	2100      	movs	r1, #0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fca6 	bl	80061f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80058bc:	2200      	movs	r2, #0
 80058be:	4912      	ldr	r1, [pc, #72]	; (8005908 <MX_USB_DEVICE_Init+0x50>)
 80058c0:	4812      	ldr	r0, [pc, #72]	; (800590c <MX_USB_DEVICE_Init+0x54>)
 80058c2:	f7fe fef3 	bl	80046ac <USBD_Init>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80058cc:	f7fa fedc 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80058d0:	490f      	ldr	r1, [pc, #60]	; (8005910 <MX_USB_DEVICE_Init+0x58>)
 80058d2:	480e      	ldr	r0, [pc, #56]	; (800590c <MX_USB_DEVICE_Init+0x54>)
 80058d4:	f7fe ff20 	bl	8004718 <USBD_RegisterClass>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80058de:	f7fa fed3 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80058e2:	490c      	ldr	r1, [pc, #48]	; (8005914 <MX_USB_DEVICE_Init+0x5c>)
 80058e4:	4809      	ldr	r0, [pc, #36]	; (800590c <MX_USB_DEVICE_Init+0x54>)
 80058e6:	f7fe fe45 	bl	8004574 <USBD_CDC_RegisterInterface>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80058f0:	f7fa feca 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80058f4:	4805      	ldr	r0, [pc, #20]	; (800590c <MX_USB_DEVICE_Init+0x54>)
 80058f6:	f7fe ff30 	bl	800475a <USBD_Start>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005900:	f7fa fec2 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005904:	bf00      	nop
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000130 	.word	0x20000130
 800590c:	20000218 	.word	0x20000218
 8005910:	20000018 	.word	0x20000018
 8005914:	2000011c 	.word	0x2000011c

08005918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800591c:	2200      	movs	r2, #0
 800591e:	4905      	ldr	r1, [pc, #20]	; (8005934 <CDC_Init_FS+0x1c>)
 8005920:	4805      	ldr	r0, [pc, #20]	; (8005938 <CDC_Init_FS+0x20>)
 8005922:	f7fe fe3c 	bl	800459e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005926:	4905      	ldr	r1, [pc, #20]	; (800593c <CDC_Init_FS+0x24>)
 8005928:	4803      	ldr	r0, [pc, #12]	; (8005938 <CDC_Init_FS+0x20>)
 800592a:	f7fe fe51 	bl	80045d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800592e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000ce8 	.word	0x20000ce8
 8005938:	20000218 	.word	0x20000218
 800593c:	200004e8 	.word	0x200004e8

08005940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	71fb      	strb	r3, [r7, #7]
 800595c:	4613      	mov	r3, r2
 800595e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b23      	cmp	r3, #35	; 0x23
 8005964:	d84a      	bhi.n	80059fc <CDC_Control_FS+0xac>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <CDC_Control_FS+0x1c>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059fd 	.word	0x080059fd
 8005970:	080059fd 	.word	0x080059fd
 8005974:	080059fd 	.word	0x080059fd
 8005978:	080059fd 	.word	0x080059fd
 800597c:	080059fd 	.word	0x080059fd
 8005980:	080059fd 	.word	0x080059fd
 8005984:	080059fd 	.word	0x080059fd
 8005988:	080059fd 	.word	0x080059fd
 800598c:	080059fd 	.word	0x080059fd
 8005990:	080059fd 	.word	0x080059fd
 8005994:	080059fd 	.word	0x080059fd
 8005998:	080059fd 	.word	0x080059fd
 800599c:	080059fd 	.word	0x080059fd
 80059a0:	080059fd 	.word	0x080059fd
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	080059fd 	.word	0x080059fd
 80059b0:	080059fd 	.word	0x080059fd
 80059b4:	080059fd 	.word	0x080059fd
 80059b8:	080059fd 	.word	0x080059fd
 80059bc:	080059fd 	.word	0x080059fd
 80059c0:	080059fd 	.word	0x080059fd
 80059c4:	080059fd 	.word	0x080059fd
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	080059fd 	.word	0x080059fd
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	080059fd 	.word	0x080059fd
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	080059fd 	.word	0x080059fd
 80059e8:	080059fd 	.word	0x080059fd
 80059ec:	080059fd 	.word	0x080059fd
 80059f0:	080059fd 	.word	0x080059fd
 80059f4:	080059fd 	.word	0x080059fd
 80059f8:	080059fd 	.word	0x080059fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80059fc:	bf00      	nop
  }

  return (USBD_OK);
 80059fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <CDC_Receive_FS+0x24>)
 8005a1a:	f7fe fdd9 	bl	80045d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005a1e:	4804      	ldr	r0, [pc, #16]	; (8005a30 <CDC_Receive_FS+0x24>)
 8005a20:	f7fe fe1a 	bl	8004658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000218 	.word	0x20000218

08005a34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <CDC_Transmit_FS+0x48>)
 8005a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e00b      	b.n	8005a72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4806      	ldr	r0, [pc, #24]	; (8005a7c <CDC_Transmit_FS+0x48>)
 8005a62:	f7fe fd9c 	bl	800459e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a66:	4805      	ldr	r0, [pc, #20]	; (8005a7c <CDC_Transmit_FS+0x48>)
 8005a68:	f7fe fdc6 	bl	80045f8 <USBD_CDC_TransmitPacket>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000218 	.word	0x20000218

08005a80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2212      	movs	r2, #18
 8005ab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	2000014c 	.word	0x2000014c

08005ac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ada:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000160 	.word	0x20000160

08005aec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4907      	ldr	r1, [pc, #28]	; (8005b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8005b02:	4808      	ldr	r0, [pc, #32]	; (8005b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b04:	f7ff fdf7 	bl	80056f6 <USBD_GetString>
 8005b08:	e004      	b.n	8005b14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	4904      	ldr	r1, [pc, #16]	; (8005b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8005b0e:	4805      	ldr	r0, [pc, #20]	; (8005b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b10:	f7ff fdf1 	bl	80056f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b14:	4b02      	ldr	r3, [pc, #8]	; (8005b20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200014e8 	.word	0x200014e8
 8005b24:	080064d0 	.word	0x080064d0

08005b28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	6039      	str	r1, [r7, #0]
 8005b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	4904      	ldr	r1, [pc, #16]	; (8005b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005b38:	4804      	ldr	r0, [pc, #16]	; (8005b4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005b3a:	f7ff fddc 	bl	80056f6 <USBD_GetString>
  return USBD_StrDesc;
 8005b3e:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200014e8 	.word	0x200014e8
 8005b4c:	080064e8 	.word	0x080064e8

08005b50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	221a      	movs	r2, #26
 8005b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005b62:	f000 f843 	bl	8005bec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005b66:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000164 	.word	0x20000164

08005b74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	6039      	str	r1, [r7, #0]
 8005b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4907      	ldr	r1, [pc, #28]	; (8005ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b8a:	4808      	ldr	r0, [pc, #32]	; (8005bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b8c:	f7ff fdb3 	bl	80056f6 <USBD_GetString>
 8005b90:	e004      	b.n	8005b9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	4904      	ldr	r1, [pc, #16]	; (8005ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b96:	4805      	ldr	r0, [pc, #20]	; (8005bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b98:	f7ff fdad 	bl	80056f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200014e8 	.word	0x200014e8
 8005bac:	080064fc 	.word	0x080064fc

08005bb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	6039      	str	r1, [r7, #0]
 8005bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4907      	ldr	r1, [pc, #28]	; (8005be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005bc6:	4808      	ldr	r0, [pc, #32]	; (8005be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005bc8:	f7ff fd95 	bl	80056f6 <USBD_GetString>
 8005bcc:	e004      	b.n	8005bd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	4904      	ldr	r1, [pc, #16]	; (8005be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005bd2:	4805      	ldr	r0, [pc, #20]	; (8005be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005bd4:	f7ff fd8f 	bl	80056f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200014e8 	.word	0x200014e8
 8005be8:	08006508 	.word	0x08006508

08005bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <Get_SerialNum+0x44>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <Get_SerialNum+0x48>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <Get_SerialNum+0x4c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005c12:	2208      	movs	r2, #8
 8005c14:	4909      	ldr	r1, [pc, #36]	; (8005c3c <Get_SerialNum+0x50>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f814 	bl	8005c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	4908      	ldr	r1, [pc, #32]	; (8005c40 <Get_SerialNum+0x54>)
 8005c20:	68b8      	ldr	r0, [r7, #8]
 8005c22:	f000 f80f 	bl	8005c44 <IntToUnicode>
  }
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	1fff7a10 	.word	0x1fff7a10
 8005c34:	1fff7a14 	.word	0x1fff7a14
 8005c38:	1fff7a18 	.word	0x1fff7a18
 8005c3c:	20000166 	.word	0x20000166
 8005c40:	20000176 	.word	0x20000176

08005c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]
 8005c5a:	e027      	b.n	8005cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	0f1b      	lsrs	r3, r3, #28
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d80b      	bhi.n	8005c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	0f1b      	lsrs	r3, r3, #28
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	440b      	add	r3, r1
 8005c74:	3230      	adds	r2, #48	; 0x30
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e00a      	b.n	8005c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	0f1b      	lsrs	r3, r3, #28
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4619      	mov	r1, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3237      	adds	r2, #55	; 0x37
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
 8005cac:	7dfa      	ldrb	r2, [r7, #23]
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d3d3      	bcc.n	8005c5c <IntToUnicode+0x18>
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	f107 0314 	add.w	r3, r7, #20
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ce0:	d13a      	bne.n	8005d58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	4a1d      	ldr	r2, [pc, #116]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8005cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d04:	2302      	movs	r3, #2
 8005d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d10:	230a      	movs	r3, #10
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d14:	f107 0314 	add.w	r3, r7, #20
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4812      	ldr	r0, [pc, #72]	; (8005d64 <HAL_PCD_MspInit+0xa4>)
 8005d1c:	f7fa ff46 	bl	8000bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	4a0e      	ldr	r2, [pc, #56]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	6353      	str	r3, [r2, #52]	; 0x34
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_PCD_MspInit+0xa0>)
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2043      	movs	r0, #67	; 0x43
 8005d4e:	f7fa fef6 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d52:	2043      	movs	r0, #67	; 0x43
 8005d54:	f7fa ff0f 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005d58:	bf00      	nop
 8005d5a:	3728      	adds	r7, #40	; 0x28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40020000 	.word	0x40020000

08005d68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe fd36 	bl	80047f0 <USBD_LL_SetupStage>
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fe fd6e 	bl	8004896 <USBD_LL_DataOutStage>
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	3348      	adds	r3, #72	; 0x48
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	4619      	mov	r1, r3
 8005dea:	f7fe fdb7 	bl	800495c <USBD_LL_DataInStage>
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe febb 	bl	8004b80 <USBD_LL_SOF>
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
 8005e2a:	e008      	b.n	8005e3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d102      	bne.n	8005e3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
 8005e38:	e001      	b.n	8005e3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005e3a:	f7fa fc25 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e44:	7bfa      	ldrb	r2, [r7, #15]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fe5e 	bl	8004b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fe17 	bl	8004a88 <USBD_LL_Reset>
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fe59 	bl	8004b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <HAL_PCD_SuspendCallback+0x48>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4a03      	ldr	r2, [pc, #12]	; (8005eac <HAL_PCD_SuspendCallback+0x48>)
 8005e9e:	f043 0306 	orr.w	r3, r3, #6
 8005ea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fe48 	bl	8004b54 <USBD_LL_Resume>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fe73 	bl	8004bce <USBD_LL_IsoOUTIncomplete>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fe54 	bl	8004bb4 <USBD_LL_IsoINIncomplete>
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fe60 	bl	8004be8 <USBD_LL_DevConnected>
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fe5d 	bl	8004bfe <USBD_LL_DevDisconnected>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13c      	bne.n	8005fd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005f5c:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005f72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f76:	2204      	movs	r2, #4
 8005f78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f7a:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f88:	2202      	movs	r2, #2
 8005f8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f92:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005faa:	480d      	ldr	r0, [pc, #52]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fac:	f7fa ffbb 	bl	8000f26 <HAL_PCD_Init>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005fb6:	f7fa fb67 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005fba:	2180      	movs	r1, #128	; 0x80
 8005fbc:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fbe:	f7fc f918 	bl	80021f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4806      	ldr	r0, [pc, #24]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fc8:	f7fc f8cc 	bl	8002164 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4803      	ldr	r0, [pc, #12]	; (8005fe0 <USBD_LL_Init+0x94>)
 8005fd2:	f7fc f8c7 	bl	8002164 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	200016e8 	.word	0x200016e8

08005fe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fb f8b0 	bl	8001160 <HAL_PCD_Start>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f92a 	bl	8006260 <USBD_Get_USB_Status>
 800600c:	4603      	mov	r3, r0
 800600e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006010:	7bbb      	ldrb	r3, [r7, #14]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	461a      	mov	r2, r3
 8006028:	4603      	mov	r3, r0
 800602a:	70fb      	strb	r3, [r7, #3]
 800602c:	460b      	mov	r3, r1
 800602e:	70bb      	strb	r3, [r7, #2]
 8006030:	4613      	mov	r3, r2
 8006032:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006042:	78bb      	ldrb	r3, [r7, #2]
 8006044:	883a      	ldrh	r2, [r7, #0]
 8006046:	78f9      	ldrb	r1, [r7, #3]
 8006048:	f7fb fc94 	bl	8001974 <HAL_PCD_EP_Open>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f904 	bl	8006260 <USBD_Get_USB_Status>
 8006058:	4603      	mov	r3, r0
 800605a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800605c:	7bbb      	ldrb	r3, [r7, #14]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f7fb fcdd 	bl	8001a44 <HAL_PCD_EP_Close>
 800608a:	4603      	mov	r3, r0
 800608c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f8e5 	bl	8006260 <USBD_Get_USB_Status>
 8006096:	4603      	mov	r3, r0
 8006098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800609a:	7bbb      	ldrb	r3, [r7, #14]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fb fdb5 	bl	8001c32 <HAL_PCD_EP_SetStall>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f8c6 	bl	8006260 <USBD_Get_USB_Status>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7fb fdfa 	bl	8001cfa <HAL_PCD_EP_ClrStall>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 f8a7 	bl	8006260 <USBD_Get_USB_Status>
 8006112:	4603      	mov	r3, r0
 8006114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006116:	7bbb      	ldrb	r3, [r7, #14]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006132:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	da0b      	bge.n	8006154 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	333e      	adds	r3, #62	; 0x3e
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	e00b      	b.n	800616c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800616a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb fbc7 	bl	800192a <HAL_PCD_SetAddress>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f85c 	bl	8006260 <USBD_Get_USB_Status>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	460b      	mov	r3, r1
 80061c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80061d4:	7af9      	ldrb	r1, [r7, #11]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	f7fb fce0 	bl	8001b9e <HAL_PCD_EP_Transmit>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f83b 	bl	8006260 <USBD_Get_USB_Status>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80061ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	460b      	mov	r3, r1
 8006206:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006216:	7af9      	ldrb	r1, [r7, #11]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	f7fb fc5c 	bl	8001ad8 <HAL_PCD_EP_Receive>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f81a 	bl	8006260 <USBD_Get_USB_Status>
 800622c:	4603      	mov	r3, r0
 800622e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006230:	7dbb      	ldrb	r3, [r7, #22]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f7fb fc8c 	bl	8001b6e <HAL_PCD_EP_GetRxCount>
 8006256:	4603      	mov	r3, r0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d817      	bhi.n	80062a4 <USBD_Get_USB_Status+0x44>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USBD_Get_USB_Status+0x1c>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	0800628d 	.word	0x0800628d
 8006280:	08006293 	.word	0x08006293
 8006284:	08006299 	.word	0x08006299
 8006288:	0800629f 	.word	0x0800629f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	73fb      	strb	r3, [r7, #15]
    break;
 8006290:	e00b      	b.n	80062aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	73fb      	strb	r3, [r7, #15]
    break;
 8006296:	e008      	b.n	80062aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
    break;
 800629c:	e005      	b.n	80062aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800629e:	2303      	movs	r3, #3
 80062a0:	73fb      	strb	r3, [r7, #15]
    break;
 80062a2:	e002      	b.n	80062aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	73fb      	strb	r3, [r7, #15]
    break;
 80062a8:	bf00      	nop
  }
  return usb_status;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <__errno>:
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <__errno+0x8>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000180 	.word	0x20000180

080062c4 <__libc_init_array>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0d      	ldr	r6, [pc, #52]	; (80062fc <__libc_init_array+0x38>)
 80062c8:	4c0d      	ldr	r4, [pc, #52]	; (8006300 <__libc_init_array+0x3c>)
 80062ca:	1ba4      	subs	r4, r4, r6
 80062cc:	10a4      	asrs	r4, r4, #2
 80062ce:	2500      	movs	r5, #0
 80062d0:	42a5      	cmp	r5, r4
 80062d2:	d109      	bne.n	80062e8 <__libc_init_array+0x24>
 80062d4:	4e0b      	ldr	r6, [pc, #44]	; (8006304 <__libc_init_array+0x40>)
 80062d6:	4c0c      	ldr	r4, [pc, #48]	; (8006308 <__libc_init_array+0x44>)
 80062d8:	f000 f8ea 	bl	80064b0 <_init>
 80062dc:	1ba4      	subs	r4, r4, r6
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	2500      	movs	r5, #0
 80062e2:	42a5      	cmp	r5, r4
 80062e4:	d105      	bne.n	80062f2 <__libc_init_array+0x2e>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062ec:	4798      	blx	r3
 80062ee:	3501      	adds	r5, #1
 80062f0:	e7ee      	b.n	80062d0 <__libc_init_array+0xc>
 80062f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062f6:	4798      	blx	r3
 80062f8:	3501      	adds	r5, #1
 80062fa:	e7f2      	b.n	80062e2 <__libc_init_array+0x1e>
 80062fc:	08006530 	.word	0x08006530
 8006300:	08006530 	.word	0x08006530
 8006304:	08006530 	.word	0x08006530
 8006308:	08006534 	.word	0x08006534

0800630c <malloc>:
 800630c:	4b02      	ldr	r3, [pc, #8]	; (8006318 <malloc+0xc>)
 800630e:	4601      	mov	r1, r0
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f000 b861 	b.w	80063d8 <_malloc_r>
 8006316:	bf00      	nop
 8006318:	20000180 	.word	0x20000180

0800631c <free>:
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <free+0xc>)
 800631e:	4601      	mov	r1, r0
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	f000 b80b 	b.w	800633c <_free_r>
 8006326:	bf00      	nop
 8006328:	20000180 	.word	0x20000180

0800632c <memset>:
 800632c:	4402      	add	r2, r0
 800632e:	4603      	mov	r3, r0
 8006330:	4293      	cmp	r3, r2
 8006332:	d100      	bne.n	8006336 <memset+0xa>
 8006334:	4770      	bx	lr
 8006336:	f803 1b01 	strb.w	r1, [r3], #1
 800633a:	e7f9      	b.n	8006330 <memset+0x4>

0800633c <_free_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4605      	mov	r5, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	d045      	beq.n	80063d0 <_free_r+0x94>
 8006344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006348:	1f0c      	subs	r4, r1, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfb8      	it	lt
 800634e:	18e4      	addlt	r4, r4, r3
 8006350:	f000 f8ac 	bl	80064ac <__malloc_lock>
 8006354:	4a1f      	ldr	r2, [pc, #124]	; (80063d4 <_free_r+0x98>)
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	4610      	mov	r0, r2
 800635a:	b933      	cbnz	r3, 800636a <_free_r+0x2e>
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	6014      	str	r4, [r2, #0]
 8006360:	4628      	mov	r0, r5
 8006362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006366:	f000 b8a2 	b.w	80064ae <__malloc_unlock>
 800636a:	42a3      	cmp	r3, r4
 800636c:	d90c      	bls.n	8006388 <_free_r+0x4c>
 800636e:	6821      	ldr	r1, [r4, #0]
 8006370:	1862      	adds	r2, r4, r1
 8006372:	4293      	cmp	r3, r2
 8006374:	bf04      	itt	eq
 8006376:	681a      	ldreq	r2, [r3, #0]
 8006378:	685b      	ldreq	r3, [r3, #4]
 800637a:	6063      	str	r3, [r4, #4]
 800637c:	bf04      	itt	eq
 800637e:	1852      	addeq	r2, r2, r1
 8006380:	6022      	streq	r2, [r4, #0]
 8006382:	6004      	str	r4, [r0, #0]
 8006384:	e7ec      	b.n	8006360 <_free_r+0x24>
 8006386:	4613      	mov	r3, r2
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	b10a      	cbz	r2, 8006390 <_free_r+0x54>
 800638c:	42a2      	cmp	r2, r4
 800638e:	d9fa      	bls.n	8006386 <_free_r+0x4a>
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	1858      	adds	r0, r3, r1
 8006394:	42a0      	cmp	r0, r4
 8006396:	d10b      	bne.n	80063b0 <_free_r+0x74>
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	4401      	add	r1, r0
 800639c:	1858      	adds	r0, r3, r1
 800639e:	4282      	cmp	r2, r0
 80063a0:	6019      	str	r1, [r3, #0]
 80063a2:	d1dd      	bne.n	8006360 <_free_r+0x24>
 80063a4:	6810      	ldr	r0, [r2, #0]
 80063a6:	6852      	ldr	r2, [r2, #4]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	4401      	add	r1, r0
 80063ac:	6019      	str	r1, [r3, #0]
 80063ae:	e7d7      	b.n	8006360 <_free_r+0x24>
 80063b0:	d902      	bls.n	80063b8 <_free_r+0x7c>
 80063b2:	230c      	movs	r3, #12
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	e7d3      	b.n	8006360 <_free_r+0x24>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	1821      	adds	r1, r4, r0
 80063bc:	428a      	cmp	r2, r1
 80063be:	bf04      	itt	eq
 80063c0:	6811      	ldreq	r1, [r2, #0]
 80063c2:	6852      	ldreq	r2, [r2, #4]
 80063c4:	6062      	str	r2, [r4, #4]
 80063c6:	bf04      	itt	eq
 80063c8:	1809      	addeq	r1, r1, r0
 80063ca:	6021      	streq	r1, [r4, #0]
 80063cc:	605c      	str	r4, [r3, #4]
 80063ce:	e7c7      	b.n	8006360 <_free_r+0x24>
 80063d0:	bd38      	pop	{r3, r4, r5, pc}
 80063d2:	bf00      	nop
 80063d4:	2000020c 	.word	0x2000020c

080063d8 <_malloc_r>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	1ccd      	adds	r5, r1, #3
 80063dc:	f025 0503 	bic.w	r5, r5, #3
 80063e0:	3508      	adds	r5, #8
 80063e2:	2d0c      	cmp	r5, #12
 80063e4:	bf38      	it	cc
 80063e6:	250c      	movcc	r5, #12
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	4606      	mov	r6, r0
 80063ec:	db01      	blt.n	80063f2 <_malloc_r+0x1a>
 80063ee:	42a9      	cmp	r1, r5
 80063f0:	d903      	bls.n	80063fa <_malloc_r+0x22>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	2000      	movs	r0, #0
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
 80063fa:	f000 f857 	bl	80064ac <__malloc_lock>
 80063fe:	4a21      	ldr	r2, [pc, #132]	; (8006484 <_malloc_r+0xac>)
 8006400:	6814      	ldr	r4, [r2, #0]
 8006402:	4621      	mov	r1, r4
 8006404:	b991      	cbnz	r1, 800642c <_malloc_r+0x54>
 8006406:	4c20      	ldr	r4, [pc, #128]	; (8006488 <_malloc_r+0xb0>)
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	b91b      	cbnz	r3, 8006414 <_malloc_r+0x3c>
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f83d 	bl	800648c <_sbrk_r>
 8006412:	6020      	str	r0, [r4, #0]
 8006414:	4629      	mov	r1, r5
 8006416:	4630      	mov	r0, r6
 8006418:	f000 f838 	bl	800648c <_sbrk_r>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d124      	bne.n	800646a <_malloc_r+0x92>
 8006420:	230c      	movs	r3, #12
 8006422:	6033      	str	r3, [r6, #0]
 8006424:	4630      	mov	r0, r6
 8006426:	f000 f842 	bl	80064ae <__malloc_unlock>
 800642a:	e7e4      	b.n	80063f6 <_malloc_r+0x1e>
 800642c:	680b      	ldr	r3, [r1, #0]
 800642e:	1b5b      	subs	r3, r3, r5
 8006430:	d418      	bmi.n	8006464 <_malloc_r+0x8c>
 8006432:	2b0b      	cmp	r3, #11
 8006434:	d90f      	bls.n	8006456 <_malloc_r+0x7e>
 8006436:	600b      	str	r3, [r1, #0]
 8006438:	50cd      	str	r5, [r1, r3]
 800643a:	18cc      	adds	r4, r1, r3
 800643c:	4630      	mov	r0, r6
 800643e:	f000 f836 	bl	80064ae <__malloc_unlock>
 8006442:	f104 000b 	add.w	r0, r4, #11
 8006446:	1d23      	adds	r3, r4, #4
 8006448:	f020 0007 	bic.w	r0, r0, #7
 800644c:	1ac3      	subs	r3, r0, r3
 800644e:	d0d3      	beq.n	80063f8 <_malloc_r+0x20>
 8006450:	425a      	negs	r2, r3
 8006452:	50e2      	str	r2, [r4, r3]
 8006454:	e7d0      	b.n	80063f8 <_malloc_r+0x20>
 8006456:	428c      	cmp	r4, r1
 8006458:	684b      	ldr	r3, [r1, #4]
 800645a:	bf16      	itet	ne
 800645c:	6063      	strne	r3, [r4, #4]
 800645e:	6013      	streq	r3, [r2, #0]
 8006460:	460c      	movne	r4, r1
 8006462:	e7eb      	b.n	800643c <_malloc_r+0x64>
 8006464:	460c      	mov	r4, r1
 8006466:	6849      	ldr	r1, [r1, #4]
 8006468:	e7cc      	b.n	8006404 <_malloc_r+0x2c>
 800646a:	1cc4      	adds	r4, r0, #3
 800646c:	f024 0403 	bic.w	r4, r4, #3
 8006470:	42a0      	cmp	r0, r4
 8006472:	d005      	beq.n	8006480 <_malloc_r+0xa8>
 8006474:	1a21      	subs	r1, r4, r0
 8006476:	4630      	mov	r0, r6
 8006478:	f000 f808 	bl	800648c <_sbrk_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d0cf      	beq.n	8006420 <_malloc_r+0x48>
 8006480:	6025      	str	r5, [r4, #0]
 8006482:	e7db      	b.n	800643c <_malloc_r+0x64>
 8006484:	2000020c 	.word	0x2000020c
 8006488:	20000210 	.word	0x20000210

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4c06      	ldr	r4, [pc, #24]	; (80064a8 <_sbrk_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4605      	mov	r5, r0
 8006494:	4608      	mov	r0, r1
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	f7fa f96c 	bl	8000774 <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20001af0 	.word	0x20001af0

080064ac <__malloc_lock>:
 80064ac:	4770      	bx	lr

080064ae <__malloc_unlock>:
 80064ae:	4770      	bx	lr

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
